/*
 * generated by Xtext
 */
parser grammar InternalPlantumlParser;

options {
	tokenVocab=InternalPlantumlLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.PlantumlGrammarAccess;

}

@members {


	private PlantumlGrammarAccess grammarAccess;
	 	
	public InternalPlantumlParser(TokenStream input, PlantumlGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Plantuml";	
	} 
	   	   	
	@Override
	protected PlantumlGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRulePlantuml
entryRulePlantuml returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPlantumlRule()); }
	 iv_rulePlantuml=rulePlantuml 
	 { $current=$iv_rulePlantuml.current; } 
	 EOF 
;

// Rule Plantuml
rulePlantuml returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlantumlAccess().getDiagramsDiagramParserRuleCall_0()); 
	    }
		lv_diagrams_0_0=ruleDiagram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlantumlRule());
	        }
       		add(
       			$current, 
       			"diagrams",
        		lv_diagrams_0_0, 
        		"Diagram");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDiagram
entryRuleDiagram returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDiagramRule()); }
	 iv_ruleDiagram=ruleDiagram 
	 { $current=$iv_ruleDiagram.current; } 
	 EOF 
;

// Rule Diagram
ruleDiagram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_START_0=RULE_START
    { 
    newLeafNode(this_START_0, grammarAccess.getDiagramAccess().getSTARTTerminalRuleCall_0()); 
    }
this_NEWLINE_1=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_1, grammarAccess.getDiagramAccess().getNEWLINETerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDiagramAccess().getInstructionsInstructionParserRuleCall_2_0()); 
	    }
		lv_instructions_2_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDiagramRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_2_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_END_3=RULE_END
    { 
    newLeafNode(this_END_3, grammarAccess.getDiagramAccess().getENDTerminalRuleCall_3()); 
    }
(this_NEWLINE_4=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_4, grammarAccess.getDiagramAccess().getNEWLINETerminalRuleCall_4()); 
    }
)*)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getArrowParserRuleCall_0_0()); 
    }
    this_Arrow_0=ruleArrow
    {
        $current = $this_Arrow_0.current;
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDefinitionParserRuleCall_0_1_0()); 
    }
    this_Definition_1=ruleDefinition
    {
        $current = $this_Definition_1.current;
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getColorsParserRuleCall_0_1_1()); 
    }
ruleColors
    {
        afterParserOrEnumRuleCall();
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getAutoNumberParserRuleCall_0_2()); 
    }
ruleAutoNumber
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getTitleParserRuleCall_0_3()); 
    }
ruleTitle
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLegendParserRuleCall_0_4()); 
    }
ruleLegend
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getNewpageParserRuleCall_0_5()); 
    }
ruleNewpage
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getAltElseParserRuleCall_0_6()); 
    }
    this_AltElse_7=ruleAltElse
    {
        $current = $this_AltElse_7.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getGroupingMessagesParserRuleCall_0_7()); 
    }
    this_GroupingMessages_8=ruleGroupingMessages
    {
        $current = $this_GroupingMessages_8.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getNoteParserRuleCall_0_8()); 
    }
    this_Note_9=ruleNote
    {
        $current = $this_Note_9.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDividerParserRuleCall_0_9()); 
    }
ruleDivider
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getReferenceParserRuleCall_0_10()); 
    }
    this_Reference_11=ruleReference
    {
        $current = $this_Reference_11.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDelayParserRuleCall_0_11()); 
    }
ruleDelay
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getSpaceParserRuleCall_0_12()); 
    }
ruleSpace
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getHidefootboxParserRuleCall_0_13()); 
    }
ruleHidefootbox
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getActivateParserRuleCall_0_14()); 
    }
    this_Activate_15=ruleActivate
    {
        $current = $this_Activate_15.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDeactivateParserRuleCall_0_15()); 
    }
    this_Deactivate_16=ruleDeactivate
    {
        $current = $this_Deactivate_16.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getParticipantCreationParserRuleCall_0_16()); 
    }
ruleParticipantCreation
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getBoxParserRuleCall_0_17()); 
    }
    this_Box_18=ruleBox
    {
        $current = $this_Box_18.current;
        afterParserOrEnumRuleCall();
    }
)?this_NEWLINE_19=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_19, grammarAccess.getInstructionAccess().getNEWLINETerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRuleArrow
entryRuleArrow returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrowRule()); }
	 iv_ruleArrow=ruleArrow 
	 { $current=$iv_ruleArrow.current; } 
	 EOF 
;

// Rule Arrow
ruleArrow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getNameMyIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleMyID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"MyID");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SEQUENCE_1=RULE_SEQUENCE
    { 
    newLeafNode(this_SEQUENCE_1, grammarAccess.getArrowAccess().getSEQUENCETerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrowAccess().getNamesMyIDParserRuleCall_2_0()); 
	    }
		lv_names_2_0=ruleMyID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrowRule());
	        }
       		add(
       			$current, 
       			"names",
        		lv_names_2_0, 
        		"MyID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Colon
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrowAccess().getColonKeyword_3_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getArrowAccess().getMyIDParserRuleCall_3_1()); 
    }
ruleMyID
    {
        afterParserOrEnumRuleCall();
    }
)*)?)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Actor
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getActorKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getNameMyIDParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleMyID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MyID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_2=Boundary
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefinitionAccess().getBoundaryKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getNameMyIDParserRuleCall_1_1_0()); 
	    }
		lv_name_3_0=ruleMyID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"MyID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_4=Control
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getControlKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getNameMyIDParserRuleCall_2_1_0()); 
	    }
		lv_name_5_0=ruleMyID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"MyID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_6=Entity
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionAccess().getEntityKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getNameMyIDParserRuleCall_3_1_0()); 
	    }
		lv_name_7_0=ruleMyID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"MyID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_8=Database
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefinitionAccess().getDatabaseKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getNameMyIDParserRuleCall_4_1_0()); 
	    }
		lv_name_9_0=ruleMyID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"MyID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_10=Participant
    {
    	newLeafNode(otherlv_10, grammarAccess.getDefinitionAccess().getParticipantKeyword_5_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getNameMyIDParserRuleCall_5_1_0_0()); 
	    }
		lv_name_11_0=ruleMyID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_11_0, 
        		"MyID");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
	otherlv_12=QuotationMark
    {
    	newLeafNode(otherlv_12, grammarAccess.getDefinitionAccess().getQuotationMarkKeyword_5_1_1_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getEndIDParserRuleCall_5_1_1_1()); 
    }
ruleEndID
    {
        afterParserOrEnumRuleCall();
    }
)*
	otherlv_14=QuotationMark
    {
    	newLeafNode(otherlv_14, grammarAccess.getDefinitionAccess().getQuotationMarkKeyword_5_1_1_2());
    }

	otherlv_15=As
    {
    	newLeafNode(otherlv_15, grammarAccess.getDefinitionAccess().getAsKeyword_5_1_1_3());
    }
this_ID_16=RULE_ID
    { 
    newLeafNode(this_ID_16, grammarAccess.getDefinitionAccess().getIDTerminalRuleCall_5_1_1_4()); 
    }
))(
	otherlv_17=LessThanSignLessThanSign
    {
    	newLeafNode(otherlv_17, grammarAccess.getDefinitionAccess().getLessThanSignLessThanSignKeyword_5_2_0());
    }
(
	otherlv_18=LeftParenthesis
    {
    	newLeafNode(otherlv_18, grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_5_2_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getEndIDParserRuleCall_5_2_1_1()); 
    }
ruleEndID
    {
        afterParserOrEnumRuleCall();
    }

	otherlv_20=Comma
    {
    	newLeafNode(otherlv_20, grammarAccess.getDefinitionAccess().getCommaKeyword_5_2_1_2());
    }

	otherlv_21=NumberSign
    {
    	newLeafNode(otherlv_21, grammarAccess.getDefinitionAccess().getNumberSignKeyword_5_2_1_3());
    }
this_HEXCODE_22=RULE_HEXCODE
    { 
    newLeafNode(this_HEXCODE_22, grammarAccess.getDefinitionAccess().getHEXCODETerminalRuleCall_5_2_1_4()); 
    }

	otherlv_23=RightParenthesis
    {
    	newLeafNode(otherlv_23, grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_5_2_1_5());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getEndIDParserRuleCall_5_2_2()); 
    }
ruleEndID
    {
        afterParserOrEnumRuleCall();
    }
)*
	otherlv_25=GreaterThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_25, grammarAccess.getDefinitionAccess().getGreaterThanSignGreaterThanSignKeyword_5_2_3());
    }
)?))
;







// Entry rule entryRuleEndID
entryRuleEndID returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getEndIDRule()); } 
	 iv_ruleEndID=ruleEndID 
	 { $current=$iv_ruleEndID.current.getText(); }  
	 EOF 
;

// Rule EndID
ruleEndID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getEndIDAccess().getIDTerminalRuleCall_0()); 
    }

    |
	kw=Create 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getCreateKeyword_1()); 
    }

    |
	kw=Autonumber 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getAutonumberKeyword_2()); 
    }

    |
	kw=Title 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getTitleKeyword_3()); 
    }

    |
	kw=Legend 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getLegendKeyword_4()); 
    }

    |
	kw=Right 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getRightKeyword_5()); 
    }

    |
	kw=Left 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getLeftKeyword_6()); 
    }

    |
	kw=Center 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getCenterKeyword_7()); 
    }

    |
	kw=Endlegend 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getEndlegendKeyword_8()); 
    }

    |
	kw=Alt 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getAltKeyword_9()); 
    }

    |
	kw=Else 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getElseKeyword_10()); 
    }

    |
	kw=Newpage 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getNewpageKeyword_11()); 
    }

    |
	kw=Opt 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getOptKeyword_12()); 
    }

    |
	kw=Loop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getLoopKeyword_13()); 
    }

    |
	kw=Par 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getParKeyword_14()); 
    }

    |
	kw=Break 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getBreakKeyword_15()); 
    }

    |
	kw=Critical 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getCriticalKeyword_16()); 
    }

    |
	kw=Group 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getGroupKeyword_17()); 
    }

    |
	kw=Note 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getNoteKeyword_18()); 
    }

    |
	kw=Over 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getOverKeyword_19()); 
    }

    |
	kw=Of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getOfKeyword_20()); 
    }

    |
	kw=Ref 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getRefKeyword_21()); 
    }

    |
	kw=Hide 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getHideKeyword_22()); 
    }

    |
	kw=Footbox 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getFootboxKeyword_23()); 
    }

    |
	kw=Activate 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getActivateKeyword_24()); 
    }

    |
	kw=Deactivate 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getDeactivateKeyword_25()); 
    }

    |
	kw=Destroy 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getDestroyKeyword_26()); 
    }

    |
	kw=Box 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getBoxKeyword_27()); 
    }

    |
	kw=NumberSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getNumberSignKeyword_28()); 
    }

    |
	kw=Comma 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getCommaKeyword_29()); 
    }

    |
	kw=LeftParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getLeftParenthesisKeyword_30()); 
    }

    |
	kw=RightParenthesis 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getRightParenthesisKeyword_31()); 
    }

    |
	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getEqualsSignKeyword_32()); 
    }

    |    this_INT_33=RULE_INT    {
		$current.merge(this_INT_33);
    }

    { 
    newLeafNode(this_INT_33, grammarAccess.getEndIDAccess().getINTTerminalRuleCall_33()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getHyphenMinusKeyword_34()); 
    }

    |
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getFullStopKeyword_35()); 
    }

    |
	kw=Colon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getColonKeyword_36()); 
    }

    |
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getGreaterThanSignKeyword_37()); 
    }

    |
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndIDAccess().getLessThanSignKeyword_38()); 
    }
)
    ;





// Entry rule entryRuleMyID
entryRuleMyID returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getMyIDRule()); } 
	 iv_ruleMyID=ruleMyID 
	 { $current=$iv_ruleMyID.current.getText(); }  
	 EOF 
;

// Rule MyID
ruleMyID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getMyIDAccess().getEndIDParserRuleCall_0()); 
    }
    this_EndID_0=ruleEndID    {
		$current.merge(this_EndID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=End 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMyIDAccess().getEndKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleAutoNumber
entryRuleAutoNumber returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAutoNumberRule()); } 
	 iv_ruleAutoNumber=ruleAutoNumber 
	 { $current=$iv_ruleAutoNumber.current.getText(); }  
	 EOF 
;

// Rule AutoNumber
ruleAutoNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Autonumber 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAutoNumberAccess().getAutonumberKeyword_0()); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getAutoNumberAccess().getINTTerminalRuleCall_1_0()); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getAutoNumberAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)?)
    ;





// Entry rule entryRuleTitle
entryRuleTitle returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTitleRule()); } 
	 iv_ruleTitle=ruleTitle 
	 { $current=$iv_ruleTitle.current.getText(); }  
	 EOF 
;

// Rule Title
ruleTitle returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Title 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTitleAccess().getTitleKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getTitleAccess().getIDTerminalRuleCall_1()); 
    }
)*)
    ;





// Entry rule entryRuleLegend
entryRuleLegend returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLegendRule()); } 
	 iv_ruleLegend=ruleLegend 
	 { $current=$iv_ruleLegend.current.getText(); }  
	 EOF 
;

// Rule Legend
ruleLegend returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Legend 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getLegendKeyword_0()); 
    }
(
	kw=Right 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getRightKeyword_1_0()); 
    }

    |
	kw=Left 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getLeftKeyword_1_1()); 
    }

    |
	kw=Center 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getCenterKeyword_1_2()); 
    }
)?(    this_NEWLINE_4=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_4);
    }

    { 
    newLeafNode(this_NEWLINE_4, grammarAccess.getLegendAccess().getNEWLINETerminalRuleCall_2_0()); 
    }
(    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getLegendAccess().getIDTerminalRuleCall_2_1()); 
    }
)*)*
	kw=Endlegend 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getEndlegendKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleNewpage
entryRuleNewpage returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNewpageRule()); } 
	 iv_ruleNewpage=ruleNewpage 
	 { $current=$iv_ruleNewpage.current.getText(); }  
	 EOF 
;

// Rule Newpage
ruleNewpage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Newpage 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNewpageAccess().getNewpageKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getNewpageAccess().getIDTerminalRuleCall_1()); 
    }
)*)
    ;





// Entry rule entryRuleAltElse
entryRuleAltElse returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAltElseRule()); }
	 iv_ruleAltElse=ruleAltElse 
	 { $current=$iv_ruleAltElse.current; } 
	 EOF 
;

// Rule AltElse
ruleAltElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Alt
    {
    	newLeafNode(otherlv_0, grammarAccess.getAltElseAccess().getAltKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getAltElseAccess().getMyIDParserRuleCall_1()); 
    }
ruleMyID
    {
        afterParserOrEnumRuleCall();
    }
)*this_NEWLINE_2=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_2, grammarAccess.getAltElseAccess().getNEWLINETerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAltElseAccess().getInstructionsInstructionParserRuleCall_3_0()); 
	    }
		lv_instructions_3_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAltElseRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_3_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAltElseAccess().getElsesElseParserRuleCall_4_0()); 
	    }
		lv_elses_4_0=ruleElse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAltElseRule());
	        }
       		add(
       			$current, 
       			"elses",
        		lv_elses_4_0, 
        		"Else");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=End
    {
    	newLeafNode(otherlv_5, grammarAccess.getAltElseAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleElse
entryRuleElse returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElseRule()); }
	 iv_ruleElse=ruleElse 
	 { $current=$iv_ruleElse.current; } 
	 EOF 
;

// Rule Else
ruleElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Else
    {
    	newLeafNode(otherlv_0, grammarAccess.getElseAccess().getElseKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getElseAccess().getMyIDParserRuleCall_1()); 
    }
ruleMyID
    {
        afterParserOrEnumRuleCall();
    }
)*this_NEWLINE_2=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_2, grammarAccess.getElseAccess().getNEWLINETerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseAccess().getInstructionsInstructionParserRuleCall_3_0()); 
	    }
		lv_instructions_3_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_3_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleGroupingMessages
entryRuleGroupingMessages returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupingMessagesRule()); }
	 iv_ruleGroupingMessages=ruleGroupingMessages 
	 { $current=$iv_ruleGroupingMessages.current; } 
	 EOF 
;

// Rule GroupingMessages
ruleGroupingMessages returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Opt
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupingMessagesAccess().getOptKeyword_0_0());
    }

    |
	otherlv_1=Loop
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroupingMessagesAccess().getLoopKeyword_0_1());
    }

    |
	otherlv_2=Par
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupingMessagesAccess().getParKeyword_0_2());
    }

    |
	otherlv_3=Break
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroupingMessagesAccess().getBreakKeyword_0_3());
    }

    |
	otherlv_4=Critical
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupingMessagesAccess().getCriticalKeyword_0_4());
    }

    |
	otherlv_5=Group
    {
    	newLeafNode(otherlv_5, grammarAccess.getGroupingMessagesAccess().getGroupKeyword_0_5());
    }
)(this_ID_6=RULE_ID
    { 
    newLeafNode(this_ID_6, grammarAccess.getGroupingMessagesAccess().getIDTerminalRuleCall_1()); 
    }
)*this_NEWLINE_7=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_7, grammarAccess.getGroupingMessagesAccess().getNEWLINETerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupingMessagesAccess().getInstructionsInstructionParserRuleCall_3_0()); 
	    }
		lv_instructions_8_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupingMessagesRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_8_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_9=End
    {
    	newLeafNode(otherlv_9, grammarAccess.getGroupingMessagesAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleNote
entryRuleNote returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNoteRule()); }
	 iv_ruleNote=ruleNote 
	 { $current=$iv_ruleNote.current; } 
	 EOF 
;

// Rule Note
ruleNote returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Note
    {
    	newLeafNode(otherlv_0, grammarAccess.getNoteAccess().getNoteKeyword_0());
    }
((
	otherlv_1=Right
    {
    	newLeafNode(otherlv_1, grammarAccess.getNoteAccess().getRightKeyword_1_0_0());
    }
(
	otherlv_2=Of
    {
    	newLeafNode(otherlv_2, grammarAccess.getNoteAccess().getOfKeyword_1_0_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getNoteAccess().getRidDefinitionCrossReference_1_0_1_1_0()); 
	}

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getNoteAccess().getCommaKeyword_1_0_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getNoteAccess().getRidsDefinitionCrossReference_1_0_1_2_1_0()); 
	}

)
))*)?)
    |(
	otherlv_6=Left
    {
    	newLeafNode(otherlv_6, grammarAccess.getNoteAccess().getLeftKeyword_1_1_0());
    }
(
	otherlv_7=Of
    {
    	newLeafNode(otherlv_7, grammarAccess.getNoteAccess().getOfKeyword_1_1_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getNoteAccess().getLidDefinitionCrossReference_1_1_1_1_0()); 
	}

)
)(
	otherlv_9=Comma
    {
    	newLeafNode(otherlv_9, grammarAccess.getNoteAccess().getCommaKeyword_1_1_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getNoteAccess().getLidsDefinitionCrossReference_1_1_1_2_1_0()); 
	}

)
))*)?)
    |(
	otherlv_11=Over
    {
    	newLeafNode(otherlv_11, grammarAccess.getNoteAccess().getOverKeyword_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getNoteAccess().getOidDefinitionCrossReference_1_2_1_0()); 
	}

)
)(
	otherlv_13=Comma
    {
    	newLeafNode(otherlv_13, grammarAccess.getNoteAccess().getCommaKeyword_1_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_14=RULE_ID
	{
		newLeafNode(otherlv_14, grammarAccess.getNoteAccess().getOidsDefinitionCrossReference_1_2_2_1_0()); 
	}

)
))*))(
    { 
        newCompositeNode(grammarAccess.getNoteAccess().getColorParserRuleCall_2()); 
    }
ruleColor
    {
        afterParserOrEnumRuleCall();
    }
)*((
	otherlv_16=Colon
    {
    	newLeafNode(otherlv_16, grammarAccess.getNoteAccess().getColonKeyword_3_0_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getNoteAccess().getMyIDParserRuleCall_3_0_1()); 
    }
ruleMyID
    {
        afterParserOrEnumRuleCall();
    }
)*)
    |((this_NEWLINE_18=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_18, grammarAccess.getNoteAccess().getNEWLINETerminalRuleCall_3_1_0_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getNoteAccess().getEndIDParserRuleCall_3_1_0_1()); 
    }
ruleEndID
    {
        afterParserOrEnumRuleCall();
    }
)*)*
	otherlv_20=End
    {
    	newLeafNode(otherlv_20, grammarAccess.getNoteAccess().getEndKeyword_3_1_1());
    }

	otherlv_21=Note
    {
    	newLeafNode(otherlv_21, grammarAccess.getNoteAccess().getNoteKeyword_3_1_2());
    }
)))
;





// Entry rule entryRuleDivider
entryRuleDivider returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDividerRule()); } 
	 iv_ruleDivider=ruleDivider 
	 { $current=$iv_ruleDivider.current.getText(); }  
	 EOF 
;

// Rule Divider
ruleDivider returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=EqualsSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDividerAccess().getEqualsSignEqualsSignKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getDividerAccess().getIDTerminalRuleCall_1()); 
    }
)*
	kw=EqualsSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDividerAccess().getEqualsSignEqualsSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Ref
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceAccess().getRefKeyword_0());
    }

	otherlv_1=Over
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceAccess().getOverKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getReferenceAccess().getIdDefinitionCrossReference_2_0()); 
	}

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getReferenceAccess().getIdsDefinitionCrossReference_3_1_0()); 
	}

)
))*((
	otherlv_5=Colon
    {
    	newLeafNode(otherlv_5, grammarAccess.getReferenceAccess().getColonKeyword_4_0_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getReferenceAccess().getMyIDParserRuleCall_4_0_1()); 
    }
ruleMyID
    {
        afterParserOrEnumRuleCall();
    }
)*)
    |((this_NEWLINE_7=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_7, grammarAccess.getReferenceAccess().getNEWLINETerminalRuleCall_4_1_0_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getReferenceAccess().getEndIDParserRuleCall_4_1_0_1()); 
    }
ruleEndID
    {
        afterParserOrEnumRuleCall();
    }
)*)*
	otherlv_9=End
    {
    	newLeafNode(otherlv_9, grammarAccess.getReferenceAccess().getEndKeyword_4_1_1());
    }

	otherlv_10=Ref
    {
    	newLeafNode(otherlv_10, grammarAccess.getReferenceAccess().getRefKeyword_4_1_2());
    }
)))
;





// Entry rule entryRuleDelay
entryRuleDelay returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDelayRule()); } 
	 iv_ruleDelay=ruleDelay 
	 { $current=$iv_ruleDelay.current.getText(); }  
	 EOF 
;

// Rule Delay
ruleDelay returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=FullStopFullStopFullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelayAccess().getFullStopFullStopFullStopKeyword_0()); 
    }
((    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getDelayAccess().getIDTerminalRuleCall_1_0()); 
    }
)*
	kw=FullStopFullStopFullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelayAccess().getFullStopFullStopFullStopKeyword_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleSpace
entryRuleSpace returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSpaceRule()); } 
	 iv_ruleSpace=ruleSpace 
	 { $current=$iv_ruleSpace.current.getText(); }  
	 EOF 
;

// Rule Space
ruleSpace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=VerticalLineVerticalLineVerticalLine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getVerticalLineVerticalLineVerticalLineKeyword_0()); 
    }

    |(
	kw=VerticalLineVerticalLine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getVerticalLineVerticalLineKeyword_1_0()); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getSpaceAccess().getINTTerminalRuleCall_1_1()); 
    }
)+
	kw=VerticalLineVerticalLine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getVerticalLineVerticalLineKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleHidefootbox
entryRuleHidefootbox returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getHidefootboxRule()); } 
	 iv_ruleHidefootbox=ruleHidefootbox 
	 { $current=$iv_ruleHidefootbox.current.getText(); }  
	 EOF 
;

// Rule Hidefootbox
ruleHidefootbox returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Hide 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHidefootboxAccess().getHideKeyword_0()); 
    }

	kw=Footbox 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHidefootboxAccess().getFootboxKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleActivate
entryRuleActivate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getActivateRule()); }
	 iv_ruleActivate=ruleActivate 
	 { $current=$iv_ruleActivate.current; } 
	 EOF 
;

// Rule Activate
ruleActivate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Activate
    {
    	newLeafNode(otherlv_0, grammarAccess.getActivateAccess().getActivateKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getActivateAccess().getColorParserRuleCall_1()); 
    }
ruleColor
    {
        afterParserOrEnumRuleCall();
    }
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getActivateAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActivateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDeactivate
entryRuleDeactivate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDeactivateRule()); }
	 iv_ruleDeactivate=ruleDeactivate 
	 { $current=$iv_ruleDeactivate.current; } 
	 EOF 
;

// Rule Deactivate
ruleDeactivate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Deactivate
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeactivateAccess().getDeactivateKeyword_0_0());
    }

    |
	otherlv_1=Destroy
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeactivateAccess().getDestroyKeyword_0_1());
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeactivateRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getDeactivateAccess().getIdActivateCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleParticipantCreation
entryRuleParticipantCreation returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getParticipantCreationRule()); } 
	 iv_ruleParticipantCreation=ruleParticipantCreation 
	 { $current=$iv_ruleParticipantCreation.current.getText(); }  
	 EOF 
;

// Rule ParticipantCreation
ruleParticipantCreation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Create 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParticipantCreationAccess().getCreateKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getParticipantCreationAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleBox
entryRuleBox returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBoxRule()); }
	 iv_ruleBox=ruleBox 
	 { $current=$iv_ruleBox.current; } 
	 EOF 
;

// Rule Box
ruleBox returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Box
    {
    	newLeafNode(otherlv_0, grammarAccess.getBoxAccess().getBoxKeyword_0());
    }

	otherlv_1=QuotationMark
    {
    	newLeafNode(otherlv_1, grammarAccess.getBoxAccess().getQuotationMarkKeyword_1());
    }
(this_ID_2=RULE_ID
    { 
    newLeafNode(this_ID_2, grammarAccess.getBoxAccess().getIDTerminalRuleCall_2()); 
    }
)*
	otherlv_3=QuotationMark
    {
    	newLeafNode(otherlv_3, grammarAccess.getBoxAccess().getQuotationMarkKeyword_3());
    }
(
    { 
        newCompositeNode(grammarAccess.getBoxAccess().getColorParserRuleCall_4()); 
    }
ruleColor
    {
        afterParserOrEnumRuleCall();
    }
)?this_NEWLINE_5=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_5, grammarAccess.getBoxAccess().getNEWLINETerminalRuleCall_5()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBoxAccess().getDefinitionsDefinitionParserRuleCall_6_0_0()); 
	    }
		lv_definitions_6_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_6_0, 
        		"Definition");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_NEWLINE_7=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_7, grammarAccess.getBoxAccess().getNEWLINETerminalRuleCall_6_1()); 
    }
)*
	otherlv_8=End
    {
    	newLeafNode(otherlv_8, grammarAccess.getBoxAccess().getEndKeyword_7());
    }

	otherlv_9=Box
    {
    	newLeafNode(otherlv_9, grammarAccess.getBoxAccess().getBoxKeyword_8());
    }
)
;





// Entry rule entryRuleColors
entryRuleColors returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getColorsRule()); } 
	 iv_ruleColors=ruleColors 
	 { $current=$iv_ruleColors.current.getText(); }  
	 EOF 
;

// Rule Colors
ruleColors returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=NumberSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorsAccess().getNumberSignKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getColorsAccess().getColorParserRuleCall_1_0()); 
    }
    this_Color_1=ruleColor    {
		$current.merge(this_Color_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_HEXCODE_2=RULE_HEXCODE    {
		$current.merge(this_HEXCODE_2);
    }

    { 
    newLeafNode(this_HEXCODE_2, grammarAccess.getColorsAccess().getHEXCODETerminalRuleCall_1_1()); 
    }
))
    ;





// Entry rule entryRuleColor
entryRuleColor returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getColorRule()); } 
	 iv_ruleColor=ruleColor 
	 { $current=$iv_ruleColor.current.getText(); }  
	 EOF 
;

// Rule Color
ruleColor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=AliceBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAliceBlueKeyword_0()); 
    }

    |
	kw=AntiqueWhite 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAntiqueWhiteKeyword_1()); 
    }

    |
	kw=Aqua 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAquaKeyword_2()); 
    }

    |
	kw=Aquamarine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAquamarineKeyword_3()); 
    }

    |
	kw=Azure 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAzureKeyword_4()); 
    }

    |
	kw=Beige 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBeigeKeyword_5()); 
    }

    |
	kw=Bisque 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBisqueKeyword_6()); 
    }

    |
	kw=Black 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlackKeyword_7()); 
    }

    |
	kw=BlanchedAlmond 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlanchedAlmondKeyword_8()); 
    }

    |
	kw=Blue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlueKeyword_9()); 
    }

    |
	kw=BlueViolet 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlueVioletKeyword_10()); 
    }

    |
	kw=Brown 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBrownKeyword_11()); 
    }

    |
	kw=BurlyWood 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBurlyWoodKeyword_12()); 
    }

    |
	kw=CadetBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCadetBlueKeyword_13()); 
    }

    |
	kw=Chartreuse 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getChartreuseKeyword_14()); 
    }

    |
	kw=Chocolate 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getChocolateKeyword_15()); 
    }

    |
	kw=Coral 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCoralKeyword_16()); 
    }

    |
	kw=CornflowerBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCornflowerBlueKeyword_17()); 
    }

    |
	kw=Cornsilk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCornsilkKeyword_18()); 
    }

    |
	kw=Crimson 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCrimsonKeyword_19()); 
    }

    |
	kw=Cyan 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCyanKeyword_20()); 
    }

    |
	kw=DarkBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkBlueKeyword_21()); 
    }

    |
	kw=DarkCyan 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkCyanKeyword_22()); 
    }

    |
	kw=DarkGoldenRod 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGoldenRodKeyword_23()); 
    }

    |
	kw=DarkGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGrayKeyword_24()); 
    }

    |
	kw=DarkGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGreenKeyword_25()); 
    }

    |
	kw=DarkGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGreyKeyword_26()); 
    }

    |
	kw=DarkKhaki 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkKhakiKeyword_27()); 
    }

    |
	kw=DarkMagenta 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkMagentaKeyword_28()); 
    }

    |
	kw=DarkOliveGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkOliveGreenKeyword_29()); 
    }

    |
	kw=DarkOrchid 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkOrchidKeyword_30()); 
    }

    |
	kw=DarkRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkRedKeyword_31()); 
    }

    |
	kw=DarkSalmo 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSalmoKeyword_32()); 
    }

    |
	kw=DarkSeaGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSeaGreenKeyword_33()); 
    }

    |
	kw=DarkSlateBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSlateBlueKeyword_34()); 
    }

    |
	kw=DarkSlateGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSlateGrayKeyword_35()); 
    }

    |
	kw=DarkSlateGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSlateGreyKeyword_36()); 
    }

    |
	kw=DarkTurquoise 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkTurquoiseKeyword_37()); 
    }

    |
	kw=DarkViolet 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkVioletKeyword_38()); 
    }

    |
	kw=Darkorange 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkorangeKeyword_39()); 
    }

    |
	kw=DeepPink 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDeepPinkKeyword_40()); 
    }

    |
	kw=DeepSkyBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDeepSkyBlueKeyword_41()); 
    }

    |
	kw=DimGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDimGrayKeyword_42()); 
    }

    |
	kw=DimGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDimGreyKeyword_43()); 
    }

    |
	kw=DodgerBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDodgerBlueKeyword_44()); 
    }

    |
	kw=FireBrick 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getFireBrickKeyword_45()); 
    }

    |
	kw=FloralWhite 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getFloralWhiteKeyword_46()); 
    }

    |
	kw=ForestGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getForestGreenKeyword_47()); 
    }

    |
	kw=Fuchsia 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getFuchsiaKeyword_48()); 
    }

    |
	kw=Gainsboro 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGainsboroKeyword_49()); 
    }

    |
	kw=GhostWhite 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGhostWhiteKeyword_50()); 
    }

    |
	kw=Gold 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGoldKeyword_51()); 
    }

    |
	kw=GoldenRod 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGoldenRodKeyword_52()); 
    }

    |
	kw=Gray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGrayKeyword_53()); 
    }

    |
	kw=Green 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGreenKeyword_54()); 
    }

    |
	kw=GreenYellow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGreenYellowKeyword_55()); 
    }

    |
	kw=Grey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGreyKeyword_56()); 
    }

    |
	kw=HoneyDew 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getHoneyDewKeyword_57()); 
    }

    |
	kw=HotPink 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getHotPinkKeyword_58()); 
    }

    |
	kw=IndianRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getIndianRedKeyword_59()); 
    }

    |
	kw=Indigo 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getIndigoKeyword_60()); 
    }

    |
	kw=Ivory 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getIvoryKeyword_61()); 
    }

    |
	kw=Khaki 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getKhakiKeyword_62()); 
    }

    |
	kw=Lavender 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLavenderKeyword_63()); 
    }

    |
	kw=LavenderBlush 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLavenderBlushKeyword_64()); 
    }

    |
	kw=LawnGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLawnGreenKeyword_65()); 
    }

    |
	kw=LemonChiffon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLemonChiffonKeyword_66()); 
    }

    |
	kw=LightBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightBlueKeyword_67()); 
    }

    |
	kw=LightCoral 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightCoralKeyword_68()); 
    }

    |
	kw=LightCyan 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightCyanKeyword_69()); 
    }

    |
	kw=LightGoldenRodYellow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGoldenRodYellowKeyword_70()); 
    }

    |
	kw=LightGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGrayKeyword_71()); 
    }

    |
	kw=LightGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGreenKeyword_72()); 
    }

    |
	kw=LightGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGreyKeyword_73()); 
    }

    |
	kw=LightPink 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightPinkKeyword_74()); 
    }

    |
	kw=LightSalmon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSalmonKeyword_75()); 
    }

    |
	kw=LightSeaGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSeaGreenKeyword_76()); 
    }

    |
	kw=LightSkyBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSkyBlueKeyword_77()); 
    }

    |
	kw=LightSlateGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSlateGrayKeyword_78()); 
    }

    |
	kw=LightSlateGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSlateGreyKeyword_79()); 
    }

    |
	kw=LightSteelBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSteelBlueKeyword_80()); 
    }

    |
	kw=LightYellow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightYellowKeyword_81()); 
    }

    |
	kw=Lime 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLimeKeyword_82()); 
    }

    |
	kw=LimeGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLimeGreenKeyword_83()); 
    }

    |
	kw=Linen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLinenKeyword_84()); 
    }

    |
	kw=Magenta 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMagentaKeyword_85()); 
    }

    |
	kw=Maroon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMaroonKeyword_86()); 
    }

    |
	kw=MediumAquaMarine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumAquaMarineKeyword_87()); 
    }

    |
	kw=MediumBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumBlueKeyword_88()); 
    }

    |
	kw=MediumOrchid 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumOrchidKeyword_89()); 
    }

    |
	kw=MediumPurple 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumPurpleKeyword_90()); 
    }

    |
	kw=MediumSeaGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumSeaGreenKeyword_91()); 
    }

    |
	kw=MediumSlateBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumSlateBlueKeyword_92()); 
    }

    |
	kw=MediumSpringGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumSpringGreenKeyword_93()); 
    }

    |
	kw=MediumTurquoise 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumTurquoiseKeyword_94()); 
    }

    |
	kw=MediumVioletRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumVioletRedKeyword_95()); 
    }

    |
	kw=MidnightBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMidnightBlueKeyword_96()); 
    }

    |
	kw=MintCream 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMintCreamKeyword_97()); 
    }

    |
	kw=MistyRose 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMistyRoseKeyword_98()); 
    }

    |
	kw=Moccasin 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMoccasinKeyword_99()); 
    }

    |
	kw=NavajoWhite 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getNavajoWhiteKeyword_100()); 
    }

    |
	kw=Navy 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getNavyKeyword_101()); 
    }

    |
	kw=OldLace 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOldLaceKeyword_102()); 
    }

    |
	kw=Olive 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOliveKeyword_103()); 
    }

    |
	kw=OliveDrab 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOliveDrabKeyword_104()); 
    }

    |
	kw=OrangeRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOrangeRedKeyword_105()); 
    }

    |
	kw=Orchid 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOrchidKeyword_106()); 
    }

    |
	kw=PaleGoldenRod 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleGoldenRodKeyword_107()); 
    }

    |
	kw=PaleGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleGreenKeyword_108()); 
    }

    |
	kw=PaleTurquoise 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleTurquoiseKeyword_109()); 
    }

    |
	kw=PaleVioletRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleVioletRedKeyword_110()); 
    }

    |
	kw=PapayaWhip 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPapayaWhipKeyword_111()); 
    }

    |
	kw=PeachPuff 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPeachPuffKeyword_112()); 
    }

    |
	kw=Peru 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPeruKeyword_113()); 
    }

    |
	kw=Pink 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPinkKeyword_114()); 
    }

    |
	kw=Plum 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPlumKeyword_115()); 
    }

    |
	kw=PowderBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPowderBlueKeyword_116()); 
    }

    |
	kw=Purple 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPurpleKeyword_117()); 
    }

    |
	kw=Red 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getRedKeyword_118()); 
    }

    |
	kw=RosyBrown 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getRosyBrownKeyword_119()); 
    }

    |
	kw=RoyalBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getRoyalBlueKeyword_120()); 
    }

    |
	kw=SaddleBrown 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSaddleBrownKeyword_121()); 
    }

    |
	kw=Salmon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSalmonKeyword_122()); 
    }

    |
	kw=SandyBrown 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSandyBrownKeyword_123()); 
    }

    |
	kw=SeaGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSeaGreenKeyword_124()); 
    }

    |
	kw=Sienna 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSiennaKeyword_125()); 
    }

    |
	kw=Silver 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSilverKeyword_126()); 
    }

    |
	kw=SkyBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSkyBlueKeyword_127()); 
    }

    |
	kw=SlateBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSlateBlueKeyword_128()); 
    }

    |
	kw=SlateGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSlateGrayKeyword_129()); 
    }

    |
	kw=SlateGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSlateGreyKeyword_130()); 
    }

    |
	kw=Snow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSnowKeyword_131()); 
    }

    |
	kw=SpringGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSpringGreenKeyword_132()); 
    }

    |
	kw=SteelBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSteelBlueKeyword_133()); 
    }

    |
	kw=Tan 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTanKeyword_134()); 
    }

    |
	kw=Teal 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTealKeyword_135()); 
    }

    |
	kw=Thistle 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getThistleKeyword_136()); 
    }

    |
	kw=Tomato 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTomatoKeyword_137()); 
    }

    |
	kw=Turquoise 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTurquoiseKeyword_138()); 
    }

    |
	kw=Violet 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getVioletKeyword_139()); 
    }

    |
	kw=Wheat 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getWheatKeyword_140()); 
    }

    |
	kw=White 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getWhiteKeyword_141()); 
    }

    |
	kw=WhiteSmoke 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getWhiteSmokeKeyword_142()); 
    }

    |
	kw=Yellow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getYellowKeyword_143()); 
    }

    |
	kw=YellowGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getYellowGreenKeyword_144()); 
    }
)
    ;





