// Class for generating the grammar for the PlantUML language.
grammar org.xtext.Plantuml 
	//with org.eclipse.xtext.common.Terminals
	hidden (WS, SL_COMMENT, ML_COMMENT)
generate plantuml "http://www.xtext.org/Plantuml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


// Model is a number of @startuml's and @enduml's
Plantuml:
	(diagrams+=Diagram)*;
	
// A diagram starts with @Startuml and ends with @enduml, with some number of instructions in between
Diagram:
	START NEWLINE (instructions+=Instruction)+ END NEWLINE*
;

// An instruction can be any of the rules for single- and multiline commands.
Instruction: 
	(Sequence
	|Definition
	| AutoNumber
	| Title
	| Legend
	| Newpage
	| GroupingMessages
	| Note
	| Divider
	| Reference 
	| Delay
	| Space
	| Hidefootbox
	| Activate
	| Deactivate
	| ParticipantCreation
	| Box
	| IncOut
	| Skinparam)? NEWLINE
;


// Rules for handling ID's, Strings, and their respective variations
// ------------------------------------------------------------------
// ------------------------------------------------------------------
Keywords:
	'create'|'autonumber'|'title'|'legend'|'right'|'left'|'center'
	   |'alt'|'else'|'newpage'|'opt'|'loop'|'par'|'break'|'as'
	   |'critical'|'group'|'note'|'over'|'of'|'ref'|'hide'|'footbox'|'activate'
	   |'actor'|'boundary'|'control'|'entity'|'database'|'participant'
	   |'deactivate'|'destroy'|'box'|'in'|'skinparam'|'sequence'
;


SpecialChars:
	'|'|'||'|'#'|ARROWBODY|':'|RIGHTARROWHEAD|LEFTARROWHEAD|'!'|')'|'('|','|'='
;

ID: BASIC_ID|Keywords|'end'|'endlegend';


Special_String:
	(BASIC_ID|Keywords|SpecialChars|ANY_OTHER|INT)*
;


Basic_String:
	(BASIC_ID|Keywords|INT|CHAR)*
;

Full_String:
	Basic_String | Quotes_String |'end' 'legend'?
;

Woend_String:
	Basic_String | Quotes_String |'endlegend'|'end legend'
;

Woendlegend_String:
	Special_String | Quotes_String |'end'
;

Quotes_String:
	'"' Special_String '"'
;


// Rules for declarations of actors
// ------------------------------------------------------------------
// ------------------------------------------------------------------
Declaration: Definition|Sequence;

// Rule for creating sequences between actors (Not necessarily previously defined)
Sequence:
	names+=ID arrow=Arrow (names+=ID ('!')? (':' Full_String)?)?
;

Arrow:
	(LEFTARROWHEAD | LEFTARROWHEADEXTENSION)? ('[' '#' Color = Color ']')? 
	ARROWBODY+ ('[' '#'  Color = Color ']' ARROWBODY+)?
	 ('[' '#' Color = Color ']')? (RIGHTARROWHEAD | RIGHTARROWHEADEXTENSION)?
;

// Rule for defining objects in PlantUML, such as
// actors, boundaries, controls, entities and databases
Definition:
	Definition_Type name=ID (Stereotype = Stereotype)? ('#' Color = Color)?
;

Definition_Type:
	('actor' 
	| 'boundary'
	| 'control'
	| 'entity'
	| 'database'
	| 'participant')
;

// 1.24 Stereotype, used in Participant_Declaration
Stereotype:
	'<<' ('(' CHAR ',' Color = Color ')')? Full_String '>>'
;

// ------------------------------------------------------------------
// ------------------------------------------------------------------



// Rule for the autonumbering function. Can be followed by one or two numbers, separated by spaces
AutoNumber:
	'autonumber' (INT (INT)?)? Quotes_String?
;

// Rule for the title of the diagram
Title:
	'title' Full_String
;

// Rule for legends.
Legend:
	'legend' ('right' | 'left' | 'center')? 
	(NEWLINE Woendlegend_String)* NEWLINE ('endlegend'|'end legend')
;

// Rule for newpages
Newpage:
	'newpage' Full_String
;

Else:
	'else' Full_String NEWLINE (instructions+=Instruction)*
;

// Rule for "grouping-messages"
GroupingMessages:
	 ('opt'|'loop'|'par'|'break'|'critical'|'group'|'alt') Full_String NEWLINE 
	(instructions+=Instruction)* (elses+=Else)* 'end'
;

// Rule for notes
Note:
	'note' (('right' ('of' rid=[Declaration|ID] (',' rids+=[Declaration|ID])*)?)
		   		 |('left' ('of' lid=[Declaration|ID] (',' lids+=[Declaration|ID])*)?)
		  		 |('over' oid=[Declaration|ID](',' oids+=[Declaration|ID])*))
		 		  ('#' Color = Color)? ((':' Full_String)| ((NEWLINE Woend_String)* NEWLINE 'end note'|'endnote'))
;

// Rule for Dividers.
Divider:
	'==' Full_String '=='
;

// Rule for References
Reference:
	'ref over' (id=[Declaration|ID]) (',' ids+=[Declaration|ID])* 
	(( ':' Full_String)|((NEWLINE (Basic_String | Quotes_String))* NEWLINE 'end ref'))
;

// Rule for delays
// TODO: Read full strings even when containing dots (....).
Delay:
	'...' (Full_String '...')?
;

// Rule for Spaces
Space:
	('|||'|('||' INT '||'))
;

// Rule for hiding the footbox
Hidefootbox:
	'hide footbox'
;

// Rules for activation, deactivation and destruction of lifelines
Activate:
	'activate' (Color = Color)? name=ID
;

Deactivate:
	('deactivate'|'destroy') id=[Activate|ID]
;

// Rule for Participant Creation
// TODO: Make sure the ID hasn't been created in beforehand.
ParticipantCreation:
	'create' name=ID
;

// Rule for box/end box
Box:
	'box' Quotes_String (Color)? NEWLINE
	(definitions+=Definition? NEWLINE)* 
	'end box'
;

IncArrow:
	('[' ARROWBODY+ RIGHTARROWHEAD)|('[' LEFTARROWHEAD ARROWBODY+)
;
OutArrow:
	(LEFTARROWHEAD ARROWBODY+ ']')|(ARROWBODY+ RIGHTARROWHEAD ']')
;

// Rule for incoming and outgoing messages
IncOut:
	((IncArrow name = ID)|(name = ID OutArrow)) (':' Full_String)?
;

Skinparam:
	'skinparam' 'sequence' '{' NEWLINE (cmd+=SkinparamCommand? NEWLINE)* '}'
;

SkinparamCommand:
	'ArrowColor' Color=Color
	|'ActorBorderColor' Color=Color
	|'LifeLineBorderColor' Color=Color
	|'LifeLineBackgroundColor' Color=Color
	|'ParticipantBorderColor' Color=Color
	|'ParticipantBackgroundColor' Color=Color
	|'ParticipantFontName' ID
	|'ActorBackgroundColor' Color=Color
	|'ActorFontColor' Color=Color
	|'Actorfontsize' INT
	|'ActorFontName' ID
;

// ValueConverter checks if the Color is a proper color or a hexcode
Color: ID|INT;

// Terminals
// ------------------------------------------------------------------
// ------------------------------------------------------------------

terminal NEWLINE 	: ('\r'? '\n');

terminal START		: '\u0040' 'startuml';

terminal END		: '\u0040' 'enduml';

// Multiline comment begins with /', and ends with '/
terminal ML_COMMENT : '/\'' -> '\'/'; 

// Singleline comment begins with ', and continues until end of line.
terminal SL_COMMENT : '\'' !('\n'|'\r')*;

terminal ARROWBODY:
	'.' | '=' | '-'
;

terminal RIGHTARROWHEAD:
	'>'
;

terminal LEFTARROWHEAD:
	'<'
;

terminal RIGHTARROWHEADEXTENSION:
	'x' | '>o' | '>x'
;

terminal LEFTARROWHEADEXTENSION:
	'x' | 'o<' | 'x<'
;

// INT is a sequence of numbers 0-9.
terminal INT returns ecore::EInt: ('0'..'9')+;

terminal CHAR: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö');

terminal BASIC_ID  		: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö')*;

terminal WS			: (' '|'\t')+;

terminal ANY_OTHER: .;


