/*
 * generated by Xtext
 */
grammar InternalPlantuml;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.PlantumlGrammarAccess;

}

@parser::members {

 	private PlantumlGrammarAccess grammarAccess;
 	
    public InternalPlantumlParser(TokenStream input, PlantumlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PlantumlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDiagramsDiagramParserRuleCall_0()); 
	    }
		lv_diagrams_0_0=ruleDiagram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"diagrams",
        		lv_diagrams_0_0, 
        		"Diagram");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDiagram
entryRuleDiagram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDiagramRule()); }
	 iv_ruleDiagram=ruleDiagram 
	 { $current=$iv_ruleDiagram.current; } 
	 EOF 
;

// Rule Diagram
ruleDiagram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@startuml' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDiagramAccess().getStartumlKeyword_0());
    }
this_NEWLINE_1=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_1, grammarAccess.getDiagramAccess().getNEWLINETerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDiagramAccess().getInstructionsInstructionParserRuleCall_2_0()); 
	    }
		lv_instructions_2_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDiagramRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_2_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='@enduml' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDiagramAccess().getEndumlKeyword_3());
    }
)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		lv_name1_0_0=RULE_ID
		{
			newLeafNode(lv_name1_0_0, grammarAccess.getInstructionAccess().getName1IDTerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstructionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name1",
        		lv_name1_0_0, 
        		"ID");
	    }

)
)this_SEQUENCE_1=RULE_SEQUENCE
    { 
    newLeafNode(this_SEQUENCE_1, grammarAccess.getInstructionAccess().getSEQUENCETerminalRuleCall_0_0_1()); 
    }
(
(
		lv_name2_2_0=RULE_ID
		{
			newLeafNode(lv_name2_2_0, grammarAccess.getInstructionAccess().getName2IDTerminalRuleCall_0_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstructionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name2",
        		lv_name2_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInstructionAccess().getColonKeyword_0_0_3_0());
    }
this_ID_4=RULE_ID
    { 
    newLeafNode(this_ID_4, grammarAccess.getInstructionAccess().getIDTerminalRuleCall_0_0_3_1()); 
    }
)?)
    |(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDefinitionParserRuleCall_0_1_0()); 
    }
    this_Definition_5=ruleDefinition
    { 
        $current = $this_Definition_5.current; 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getColorParserRuleCall_0_1_1()); 
    }
ruleColor
    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getAutoNumberParserRuleCall_0_2()); 
    }
ruleAutoNumber
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getTitleParserRuleCall_0_3()); 
    }
ruleTitle
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLegendParserRuleCall_0_4()); 
    }
ruleLegend
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getNewpageParserRuleCall_0_5()); 
    }
ruleNewpage
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getAltElseParserRuleCall_0_6()); 
    }
    this_AltElse_11=ruleAltElse
    { 
        $current = $this_AltElse_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getGroupingMessagesParserRuleCall_0_7()); 
    }
    this_GroupingMessages_12=ruleGroupingMessages
    { 
        $current = $this_GroupingMessages_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getNoteParserRuleCall_0_8()); 
    }
ruleNote
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDividerParserRuleCall_0_9()); 
    }
ruleDivider
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getReferenceParserRuleCall_0_10()); 
    }
ruleReference
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDelayParserRuleCall_0_11()); 
    }
ruleDelay
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getSpaceParserRuleCall_0_12()); 
    }
ruleSpace
    { 
        afterParserOrEnumRuleCall();
    }
)?this_NEWLINE_18=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_18, grammarAccess.getInstructionAccess().getNEWLINETerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='actor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getActorKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
    |(	otherlv_2='boundary' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefinitionAccess().getBoundaryKeyword_1_0());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))
    |(	otherlv_4='control' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getControlKeyword_2_0());
    }
(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
))
    |(	otherlv_6='entity' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionAccess().getEntityKeyword_3_0());
    }
(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
))
    |(	otherlv_8='database' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefinitionAccess().getDatabaseKeyword_4_0());
    }
(
(
		lv_name_9_0=RULE_ID
		{
			newLeafNode(lv_name_9_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"ID");
	    }

)
))
    |(	otherlv_10='participant' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDefinitionAccess().getParticipantKeyword_5_0());
    }
(
(
		lv_name_11_0=RULE_ID
		{
			newLeafNode(lv_name_11_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_11_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleAutoNumber
entryRuleAutoNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAutoNumberRule()); } 
	 iv_ruleAutoNumber=ruleAutoNumber 
	 { $current=$iv_ruleAutoNumber.current.getText(); }  
	 EOF 
;

// Rule AutoNumber
ruleAutoNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='autonumber' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAutoNumberAccess().getAutonumberKeyword_0()); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getAutoNumberAccess().getINTTerminalRuleCall_1_0()); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getAutoNumberAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)?)
    ;





// Entry rule entryRuleColor
entryRuleColor returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getColorRule()); } 
	 iv_ruleColor=ruleColor 
	 { $current=$iv_ruleColor.current.getText(); }  
	 EOF 
;

// Rule Color
ruleColor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getNumberSignKeyword_0()); 
    }
)+(
	kw='AliceBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAliceBlueKeyword_1_0()); 
    }

    |
	kw='AntiqueWhite' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAntiqueWhiteKeyword_1_1()); 
    }

    |
	kw='Aqua' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAquaKeyword_1_2()); 
    }

    |
	kw='Aquamarine' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAquamarineKeyword_1_3()); 
    }

    |
	kw='Azure' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAzureKeyword_1_4()); 
    }

    |
	kw='Beige' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBeigeKeyword_1_5()); 
    }

    |
	kw='Bisque' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBisqueKeyword_1_6()); 
    }

    |
	kw='Black' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlackKeyword_1_7()); 
    }

    |
	kw='BlanchedAlmond' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlanchedAlmondKeyword_1_8()); 
    }

    |
	kw='Blue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlueKeyword_1_9()); 
    }

    |
	kw='BlueViolet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlueVioletKeyword_1_10()); 
    }

    |
	kw='Brown' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBrownKeyword_1_11()); 
    }

    |
	kw='BurlyWood' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBurlyWoodKeyword_1_12()); 
    }

    |
	kw='CadetBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCadetBlueKeyword_1_13()); 
    }

    |
	kw='Chartreuse' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getChartreuseKeyword_1_14()); 
    }

    |
	kw='Chocolate' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getChocolateKeyword_1_15()); 
    }

    |
	kw='Coral' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCoralKeyword_1_16()); 
    }

    |
	kw='CornflowerBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCornflowerBlueKeyword_1_17()); 
    }

    |
	kw='Cornsilk' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCornsilkKeyword_1_18()); 
    }

    |
	kw='Crimson' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCrimsonKeyword_1_19()); 
    }

    |
	kw='Cyan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCyanKeyword_1_20()); 
    }

    |
	kw='DarkBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkBlueKeyword_1_21()); 
    }

    |
	kw='DarkCyan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkCyanKeyword_1_22()); 
    }

    |
	kw='DarkGoldenRod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGoldenRodKeyword_1_23()); 
    }

    |
	kw='DarkGray' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGrayKeyword_1_24()); 
    }

    |
	kw='DarkGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGreenKeyword_1_25()); 
    }

    |
	kw='DarkGrey' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGreyKeyword_1_26()); 
    }

    |
	kw='DarkKhaki' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkKhakiKeyword_1_27()); 
    }

    |
	kw='DarkMagenta' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkMagentaKeyword_1_28()); 
    }

    |
	kw='DarkOliveGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkOliveGreenKeyword_1_29()); 
    }

    |
	kw='DarkOrchid' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkOrchidKeyword_1_30()); 
    }

    |
	kw='DarkRed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkRedKeyword_1_31()); 
    }

    |
	kw='DarkSalmo' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSalmoKeyword_1_32()); 
    }

    |
	kw='DarkSeaGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSeaGreenKeyword_1_33()); 
    }

    |
	kw='DarkSlateBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSlateBlueKeyword_1_34()); 
    }

    |
	kw='DarkSlateGray' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSlateGrayKeyword_1_35()); 
    }

    |
	kw='DarkSlateGrey' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSlateGreyKeyword_1_36()); 
    }

    |
	kw='DarkTurquoise' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkTurquoiseKeyword_1_37()); 
    }

    |
	kw='DarkViolet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkVioletKeyword_1_38()); 
    }

    |
	kw='Darkorange' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkorangeKeyword_1_39()); 
    }

    |
	kw='DeepPink' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDeepPinkKeyword_1_40()); 
    }

    |
	kw='DeepSkyBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDeepSkyBlueKeyword_1_41()); 
    }

    |
	kw='DimGray' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDimGrayKeyword_1_42()); 
    }

    |
	kw='DimGrey' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDimGreyKeyword_1_43()); 
    }

    |
	kw='DodgerBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDodgerBlueKeyword_1_44()); 
    }

    |
	kw='FireBrick' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getFireBrickKeyword_1_45()); 
    }

    |
	kw='FloralWhite' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getFloralWhiteKeyword_1_46()); 
    }

    |
	kw='ForestGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getForestGreenKeyword_1_47()); 
    }

    |
	kw='Fuchsia' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getFuchsiaKeyword_1_48()); 
    }

    |
	kw='Gainsboro' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGainsboroKeyword_1_49()); 
    }

    |
	kw='GhostWhite' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGhostWhiteKeyword_1_50()); 
    }

    |
	kw='Gold' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGoldKeyword_1_51()); 
    }

    |
	kw='GoldenRod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGoldenRodKeyword_1_52()); 
    }

    |
	kw='Gray' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGrayKeyword_1_53()); 
    }

    |
	kw='Green' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGreenKeyword_1_54()); 
    }

    |
	kw='GreenYellow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGreenYellowKeyword_1_55()); 
    }

    |
	kw='Grey' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGreyKeyword_1_56()); 
    }

    |
	kw='HoneyDew' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getHoneyDewKeyword_1_57()); 
    }

    |
	kw='HotPink' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getHotPinkKeyword_1_58()); 
    }

    |
	kw='IndianRed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getIndianRedKeyword_1_59()); 
    }

    |
	kw='Indigo' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getIndigoKeyword_1_60()); 
    }

    |
	kw='Ivory' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getIvoryKeyword_1_61()); 
    }

    |
	kw='Khaki' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getKhakiKeyword_1_62()); 
    }

    |
	kw='Lavender' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLavenderKeyword_1_63()); 
    }

    |
	kw='LavenderBlush' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLavenderBlushKeyword_1_64()); 
    }

    |
	kw='LawnGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLawnGreenKeyword_1_65()); 
    }

    |
	kw='LemonChiffon' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLemonChiffonKeyword_1_66()); 
    }

    |
	kw='LightBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightBlueKeyword_1_67()); 
    }

    |
	kw='LightCoral' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightCoralKeyword_1_68()); 
    }

    |
	kw='LightCyan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightCyanKeyword_1_69()); 
    }

    |
	kw='LightGoldenRodYellow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGoldenRodYellowKeyword_1_70()); 
    }

    |
	kw='LightGray' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGrayKeyword_1_71()); 
    }

    |
	kw='LightGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGreenKeyword_1_72()); 
    }

    |
	kw='LightGrey' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGreyKeyword_1_73()); 
    }

    |
	kw='LightPink' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightPinkKeyword_1_74()); 
    }

    |
	kw='LightSalmon' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSalmonKeyword_1_75()); 
    }

    |
	kw='LightSeaGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSeaGreenKeyword_1_76()); 
    }

    |
	kw='LightSkyBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSkyBlueKeyword_1_77()); 
    }

    |
	kw='LightSlateGray' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSlateGrayKeyword_1_78()); 
    }

    |
	kw='LightSlateGrey' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSlateGreyKeyword_1_79()); 
    }

    |
	kw='LightSteelBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSteelBlueKeyword_1_80()); 
    }

    |
	kw='LightYellow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightYellowKeyword_1_81()); 
    }

    |
	kw='Lime' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLimeKeyword_1_82()); 
    }

    |
	kw='LimeGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLimeGreenKeyword_1_83()); 
    }

    |
	kw='Linen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLinenKeyword_1_84()); 
    }

    |
	kw='Magenta' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMagentaKeyword_1_85()); 
    }

    |
	kw='Maroon' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMaroonKeyword_1_86()); 
    }

    |
	kw='MediumAquaMarine' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumAquaMarineKeyword_1_87()); 
    }

    |
	kw='MediumBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumBlueKeyword_1_88()); 
    }

    |
	kw='MediumOrchid' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumOrchidKeyword_1_89()); 
    }

    |
	kw='MediumPurple' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumPurpleKeyword_1_90()); 
    }

    |
	kw='MediumSeaGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumSeaGreenKeyword_1_91()); 
    }

    |
	kw='MediumSlateBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumSlateBlueKeyword_1_92()); 
    }

    |
	kw='MediumSpringGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumSpringGreenKeyword_1_93()); 
    }

    |
	kw='MediumTurquoise' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumTurquoiseKeyword_1_94()); 
    }

    |
	kw='MediumVioletRed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumVioletRedKeyword_1_95()); 
    }

    |
	kw='MidnightBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMidnightBlueKeyword_1_96()); 
    }

    |
	kw='MintCream' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMintCreamKeyword_1_97()); 
    }

    |
	kw='MistyRose' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMistyRoseKeyword_1_98()); 
    }

    |
	kw='Moccasin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMoccasinKeyword_1_99()); 
    }

    |
	kw='NavajoWhite' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getNavajoWhiteKeyword_1_100()); 
    }

    |
	kw='Navy' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getNavyKeyword_1_101()); 
    }

    |
	kw='OldLace' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOldLaceKeyword_1_102()); 
    }

    |
	kw='Olive' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOliveKeyword_1_103()); 
    }

    |
	kw='OliveDrab' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOliveDrabKeyword_1_104()); 
    }

    |
	kw='OrangeRed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOrangeRedKeyword_1_105()); 
    }

    |
	kw='Orchid' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOrchidKeyword_1_106()); 
    }

    |
	kw='PaleGoldenRod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleGoldenRodKeyword_1_107()); 
    }

    |
	kw='PaleGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleGreenKeyword_1_108()); 
    }

    |
	kw='PaleTurquoise' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleTurquoiseKeyword_1_109()); 
    }

    |
	kw='PaleVioletRed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleVioletRedKeyword_1_110()); 
    }

    |
	kw='PapayaWhip' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPapayaWhipKeyword_1_111()); 
    }

    |
	kw='PeachPuff' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPeachPuffKeyword_1_112()); 
    }

    |
	kw='Peru' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPeruKeyword_1_113()); 
    }

    |
	kw='Pink' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPinkKeyword_1_114()); 
    }

    |
	kw='Plum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPlumKeyword_1_115()); 
    }

    |
	kw='PowderBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPowderBlueKeyword_1_116()); 
    }

    |
	kw='Purple' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPurpleKeyword_1_117()); 
    }

    |
	kw='Red' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getRedKeyword_1_118()); 
    }

    |
	kw='RosyBrown' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getRosyBrownKeyword_1_119()); 
    }

    |
	kw='RoyalBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getRoyalBlueKeyword_1_120()); 
    }

    |
	kw='SaddleBrown' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSaddleBrownKeyword_1_121()); 
    }

    |
	kw='Salmon' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSalmonKeyword_1_122()); 
    }

    |
	kw='SandyBrown' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSandyBrownKeyword_1_123()); 
    }

    |
	kw='SeaGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSeaGreenKeyword_1_124()); 
    }

    |
	kw='Sienna' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSiennaKeyword_1_125()); 
    }

    |
	kw='Silver' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSilverKeyword_1_126()); 
    }

    |
	kw='SkyBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSkyBlueKeyword_1_127()); 
    }

    |
	kw='SlateBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSlateBlueKeyword_1_128()); 
    }

    |
	kw='SlateGray' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSlateGrayKeyword_1_129()); 
    }

    |
	kw='SlateGrey' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSlateGreyKeyword_1_130()); 
    }

    |
	kw='Snow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSnowKeyword_1_131()); 
    }

    |
	kw='SpringGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSpringGreenKeyword_1_132()); 
    }

    |
	kw='SteelBlue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSteelBlueKeyword_1_133()); 
    }

    |
	kw='Tan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTanKeyword_1_134()); 
    }

    |
	kw='Teal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTealKeyword_1_135()); 
    }

    |
	kw='Thistle' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getThistleKeyword_1_136()); 
    }

    |
	kw='Tomato' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTomatoKeyword_1_137()); 
    }

    |
	kw='Turquoise' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTurquoiseKeyword_1_138()); 
    }

    |
	kw='Violet' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getVioletKeyword_1_139()); 
    }

    |
	kw='Wheat' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getWheatKeyword_1_140()); 
    }

    |
	kw='White' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getWhiteKeyword_1_141()); 
    }

    |
	kw='WhiteSmoke' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getWhiteSmokeKeyword_1_142()); 
    }

    |
	kw='Yellow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getYellowKeyword_1_143()); 
    }

    |
	kw='YellowGreen' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getYellowGreenKeyword_1_144()); 
    }
))
    ;





// Entry rule entryRuleTitle
entryRuleTitle returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTitleRule()); } 
	 iv_ruleTitle=ruleTitle 
	 { $current=$iv_ruleTitle.current.getText(); }  
	 EOF 
;

// Rule Title
ruleTitle returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='title' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTitleAccess().getTitleKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getTitleAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleLegend
entryRuleLegend returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLegendRule()); } 
	 iv_ruleLegend=ruleLegend 
	 { $current=$iv_ruleLegend.current.getText(); }  
	 EOF 
;

// Rule Legend
ruleLegend returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='legend' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getLegendKeyword_0()); 
    }
(
	kw='right' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getRightKeyword_1_0()); 
    }

    |
	kw='left' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getLeftKeyword_1_1()); 
    }

    |
	kw='center' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getCenterKeyword_1_2()); 
    }
)?((    this_NEWLINE_4=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_4);
    }

    { 
    newLeafNode(this_NEWLINE_4, grammarAccess.getLegendAccess().getNEWLINETerminalRuleCall_2_0_0()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getLegendAccess().getIDTerminalRuleCall_2_0_1()); 
    }
)
    |    this_NEWLINE_6=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_6);
    }

    { 
    newLeafNode(this_NEWLINE_6, grammarAccess.getLegendAccess().getNEWLINETerminalRuleCall_2_1()); 
    }
)*    this_NEWLINE_7=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_7);
    }

    { 
    newLeafNode(this_NEWLINE_7, grammarAccess.getLegendAccess().getNEWLINETerminalRuleCall_3()); 
    }

	kw='endlegend' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getEndlegendKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleNewpage
entryRuleNewpage returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewpageRule()); } 
	 iv_ruleNewpage=ruleNewpage 
	 { $current=$iv_ruleNewpage.current.getText(); }  
	 EOF 
;

// Rule Newpage
ruleNewpage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='newpage' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNewpageAccess().getNewpageKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getNewpageAccess().getIDTerminalRuleCall_1()); 
    }
)?)
    ;





// Entry rule entryRuleAltElse
entryRuleAltElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAltElseRule()); }
	 iv_ruleAltElse=ruleAltElse 
	 { $current=$iv_ruleAltElse.current; } 
	 EOF 
;

// Rule AltElse
ruleAltElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alt' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAltElseAccess().getAltKeyword_0());
    }
this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getAltElseAccess().getIDTerminalRuleCall_1()); 
    }
this_NEWLINE_2=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_2, grammarAccess.getAltElseAccess().getNEWLINETerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAltElseAccess().getInstructionsInstructionParserRuleCall_3_0()); 
	    }
		lv_instructions_3_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAltElseRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_3_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAltElseAccess().getElsesElseParserRuleCall_4_0()); 
	    }
		lv_elses_4_0=ruleElse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAltElseRule());
	        }
       		add(
       			$current, 
       			"elses",
        		lv_elses_4_0, 
        		"Else");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='end' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAltElseAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleElse
entryRuleElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseRule()); }
	 iv_ruleElse=ruleElse 
	 { $current=$iv_ruleElse.current; } 
	 EOF 
;

// Rule Else
ruleElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='else' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElseAccess().getElseKeyword_0());
    }
this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getElseAccess().getIDTerminalRuleCall_1()); 
    }
this_NEWLINE_2=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_2, grammarAccess.getElseAccess().getNEWLINETerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseAccess().getInstructionsInstructionParserRuleCall_3_0()); 
	    }
		lv_instructions_3_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_3_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleGroupingMessages
entryRuleGroupingMessages returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupingMessagesRule()); }
	 iv_ruleGroupingMessages=ruleGroupingMessages 
	 { $current=$iv_ruleGroupingMessages.current; } 
	 EOF 
;

// Rule GroupingMessages
ruleGroupingMessages returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='opt' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupingMessagesAccess().getOptKeyword_0_0());
    }

    |	otherlv_1='loop' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroupingMessagesAccess().getLoopKeyword_0_1());
    }

    |	otherlv_2='par' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupingMessagesAccess().getParKeyword_0_2());
    }

    |	otherlv_3='break' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroupingMessagesAccess().getBreakKeyword_0_3());
    }

    |	otherlv_4='critical' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupingMessagesAccess().getCriticalKeyword_0_4());
    }
)this_ID_5=RULE_ID
    { 
    newLeafNode(this_ID_5, grammarAccess.getGroupingMessagesAccess().getIDTerminalRuleCall_1()); 
    }
this_NEWLINE_6=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_6, grammarAccess.getGroupingMessagesAccess().getNEWLINETerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupingMessagesAccess().getInstructionsInstructionParserRuleCall_3_0()); 
	    }
		lv_instructions_7_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupingMessagesRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_7_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='end' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGroupingMessagesAccess().getEndKeyword_4());
    }
)
;







// Entry rule entryRuleNote
entryRuleNote returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoteRule()); } 
	 iv_ruleNote=ruleNote 
	 { $current=$iv_ruleNote.current.getText(); }  
	 EOF 
;

// Rule Note
ruleNote returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='note' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getNoteKeyword_0()); 
    }
((
	kw='right' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getRightKeyword_1_0_0()); 
    }
(
	kw='of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getOfKeyword_1_0_1_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getNoteAccess().getIDTerminalRuleCall_1_0_1_1()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getCommaKeyword_1_0_1_2_0()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getNoteAccess().getIDTerminalRuleCall_1_0_1_2_1()); 
    }
)*)?)
    |(
	kw='left' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getLeftKeyword_1_1_0()); 
    }
(
	kw='of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getOfKeyword_1_1_1_0()); 
    }
    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    newLeafNode(this_ID_8, grammarAccess.getNoteAccess().getIDTerminalRuleCall_1_1_1_1()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getCommaKeyword_1_1_1_2_0()); 
    }
    this_ID_10=RULE_ID    {
		$current.merge(this_ID_10);
    }

    { 
    newLeafNode(this_ID_10, grammarAccess.getNoteAccess().getIDTerminalRuleCall_1_1_1_2_1()); 
    }
)*)?)
    |(
	kw='over' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getOverKeyword_1_2_0()); 
    }
    this_ID_12=RULE_ID    {
		$current.merge(this_ID_12);
    }

    { 
    newLeafNode(this_ID_12, grammarAccess.getNoteAccess().getIDTerminalRuleCall_1_2_1()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getCommaKeyword_1_2_2_0()); 
    }
    this_ID_14=RULE_ID    {
		$current.merge(this_ID_14);
    }

    { 
    newLeafNode(this_ID_14, grammarAccess.getNoteAccess().getIDTerminalRuleCall_1_2_2_1()); 
    }
)*))(
    { 
        newCompositeNode(grammarAccess.getNoteAccess().getColorParserRuleCall_2()); 
    }
    this_Color_15=ruleColor    {
		$current.merge(this_Color_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*((
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getColonKeyword_3_0_0()); 
    }
    this_ID_17=RULE_ID    {
		$current.merge(this_ID_17);
    }

    { 
    newLeafNode(this_ID_17, grammarAccess.getNoteAccess().getIDTerminalRuleCall_3_0_1()); 
    }
)
    |((    this_NEWLINE_18=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_18);
    }

    { 
    newLeafNode(this_NEWLINE_18, grammarAccess.getNoteAccess().getNEWLINETerminalRuleCall_3_1_0_0()); 
    }
    this_ID_19=RULE_ID    {
		$current.merge(this_ID_19);
    }

    { 
    newLeafNode(this_ID_19, grammarAccess.getNoteAccess().getIDTerminalRuleCall_3_1_0_1()); 
    }
)*    this_NEWLINE_20=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_20);
    }

    { 
    newLeafNode(this_NEWLINE_20, grammarAccess.getNoteAccess().getNEWLINETerminalRuleCall_3_1_1()); 
    }

	kw='end note' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoteAccess().getEndNoteKeyword_3_1_2()); 
    }
)))
    ;





// Entry rule entryRuleDivider
entryRuleDivider returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDividerRule()); } 
	 iv_ruleDivider=ruleDivider 
	 { $current=$iv_ruleDivider.current.getText(); }  
	 EOF 
;

// Rule Divider
ruleDivider returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDividerAccess().getEqualsSignEqualsSignKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getDividerAccess().getIDTerminalRuleCall_1()); 
    }

	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDividerAccess().getEqualsSignEqualsSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleReference
entryRuleReference returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); } 
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current.getText(); }  
	 EOF 
;

// Rule Reference
ruleReference returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ref over' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReferenceAccess().getRefOverKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getReferenceAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReferenceAccess().getCommaKeyword_2_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getReferenceAccess().getIDTerminalRuleCall_2_1()); 
    }
)*((
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReferenceAccess().getColonKeyword_3_0_0()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getReferenceAccess().getIDTerminalRuleCall_3_0_1()); 
    }
)
    |((    this_NEWLINE_6=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_6);
    }

    { 
    newLeafNode(this_NEWLINE_6, grammarAccess.getReferenceAccess().getNEWLINETerminalRuleCall_3_1_0_0()); 
    }
    this_ID_7=RULE_ID    {
		$current.merge(this_ID_7);
    }

    { 
    newLeafNode(this_ID_7, grammarAccess.getReferenceAccess().getIDTerminalRuleCall_3_1_0_1()); 
    }
)*    this_NEWLINE_8=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_8);
    }

    { 
    newLeafNode(this_NEWLINE_8, grammarAccess.getReferenceAccess().getNEWLINETerminalRuleCall_3_1_1()); 
    }

	kw='end ref' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReferenceAccess().getEndRefKeyword_3_1_2()); 
    }
)))
    ;





// Entry rule entryRuleDelay
entryRuleDelay returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelayRule()); } 
	 iv_ruleDelay=ruleDelay 
	 { $current=$iv_ruleDelay.current.getText(); }  
	 EOF 
;

// Rule Delay
ruleDelay returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelayAccess().getFullStopFullStopFullStopKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getDelayAccess().getIDTerminalRuleCall_1()); 
    }
)*
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelayAccess().getFullStopFullStopFullStopKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleSpace
entryRuleSpace returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpaceRule()); } 
	 iv_ruleSpace=ruleSpace 
	 { $current=$iv_ruleSpace.current.getText(); }  
	 EOF 
;

// Rule Space
ruleSpace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='|||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getVerticalLineVerticalLineVerticalLineKeyword_0()); 
    }

    |(
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getVerticalLineVerticalLineKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getSpaceAccess().getINTTerminalRuleCall_1_1()); 
    }

	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getVerticalLineVerticalLineKeyword_1_2()); 
    }
))
    ;





RULE_NEWLINE : '\r'? '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_'|'\u00E5'|'\u00E4'|'\u00F6') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'\u00E5'|'\u00E4'|'\u00F6')*;

RULE_ML_COMMENT : '/\'' ( options {greedy=false;} : . )*'\'/';

RULE_SL_COMMENT : '\'' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_INT : ('0'..'9')+;

RULE_SEQUENCE : ('-'* '-' '>'|'<' '-' '-'*|'-' '>' 'x'|'x' '<' '-'|'-'* '-' '>' '>'|'<' '<' '-' '-'*|'-'* '-' '\\' '\\'|'/' '-' '-'*|'/' '/' '-' '-'*|'-'* '-' '>' 'o'|'o' '<' '-' '-'*|'-'* '-' '-' '/' '/' 'o'|'o' '\\\\' '-' '-' '-'*|'<' '-' '>'|'<' '-' '>' 'o'|'o' '<' '-' '>'|'<' '|' '-' '-'|'-' '-' '|' '>'|'.' '.'|'.');

RULE_WS : (' '|'\t')+;

RULE_ANY_OTHER : .;


