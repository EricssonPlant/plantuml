/*
 * generated by Xtext
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.services.PlantumlGrammarAccess;

@SuppressWarnings("all")
public class PlantumlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PlantumlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_GroupingMessages_BreakKeyword_0_3_or_CriticalKeyword_0_4_or_LoopKeyword_0_1_or_OptKeyword_0_0_or_ParKeyword_0_2;
	protected AbstractElementAlias match_Instruction_ColorParserRuleCall_0_1_1_q;
	protected AbstractElementAlias match_Instruction___AutoNumberParserRuleCall_0_2_or_DelayParserRuleCall_0_11_or_DividerParserRuleCall_0_9_or_HidefootboxParserRuleCall_0_13_or_LegendParserRuleCall_0_4_or_NewpageParserRuleCall_0_5_or_NoteParserRuleCall_0_8_or_ReferenceParserRuleCall_0_10_or_SpaceParserRuleCall_0_12_or_TitleParserRuleCall_0_3__q;
	protected AbstractElementAlias match_Instruction___ColonKeyword_0_0_3_0_IDTerminalRuleCall_0_0_3_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PlantumlGrammarAccess) access;
		match_GroupingMessages_BreakKeyword_0_3_or_CriticalKeyword_0_4_or_LoopKeyword_0_1_or_OptKeyword_0_0_or_ParKeyword_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getGroupingMessagesAccess().getBreakKeyword_0_3()), new TokenAlias(false, false, grammarAccess.getGroupingMessagesAccess().getCriticalKeyword_0_4()), new TokenAlias(false, false, grammarAccess.getGroupingMessagesAccess().getLoopKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getGroupingMessagesAccess().getOptKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getGroupingMessagesAccess().getParKeyword_0_2()));
		match_Instruction_ColorParserRuleCall_0_1_1_q = new TokenAlias(false, true, grammarAccess.getInstructionAccess().getColorParserRuleCall_0_1_1());
		match_Instruction___AutoNumberParserRuleCall_0_2_or_DelayParserRuleCall_0_11_or_DividerParserRuleCall_0_9_or_HidefootboxParserRuleCall_0_13_or_LegendParserRuleCall_0_4_or_NewpageParserRuleCall_0_5_or_NoteParserRuleCall_0_8_or_ReferenceParserRuleCall_0_10_or_SpaceParserRuleCall_0_12_or_TitleParserRuleCall_0_3__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getInstructionAccess().getAutoNumberParserRuleCall_0_2()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getDelayParserRuleCall_0_11()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getDividerParserRuleCall_0_9()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getHidefootboxParserRuleCall_0_13()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getLegendParserRuleCall_0_4()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getNewpageParserRuleCall_0_5()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getNoteParserRuleCall_0_8()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getReferenceParserRuleCall_0_10()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getSpaceParserRuleCall_0_12()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getTitleParserRuleCall_0_3()));
		match_Instruction___ColonKeyword_0_0_3_0_IDTerminalRuleCall_0_0_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getInstructionAccess().getColonKeyword_0_0_3_0()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getIDTerminalRuleCall_0_0_3_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getAutoNumberRule())
			return getAutoNumberToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getColorRule())
			return getColorToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getDelayRule())
			return getDelayToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getDividerRule())
			return getDividerToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getHidefootboxRule())
			return getHidefootboxToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getLegendRule())
			return getLegendToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNewpageRule())
			return getNewpageToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getNoteRule())
			return getNoteToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getReferenceRule())
			return getReferenceToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSEQUENCERule())
			return getSEQUENCEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSpaceRule())
			return getSpaceToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getTitleRule())
			return getTitleToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * AutoNumber:
	 * 	'autonumber' (INT (INT)?)?
	 * ;
	 */
	protected String getAutoNumberToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "autonumber";
	}
	
	/**
	 * Color:
	 * 	'#'+('AliceBlue'|'AntiqueWhite'|'Aqua'|'Aquamarine'|'Azure'|'Beige'|'Bisque'|'Black'|'BlanchedAlmond'
	 * 	|'Blue'|'BlueViolet'|'Brown'|'BurlyWood'|'CadetBlue'|'Chartreuse'|'Chocolate'|'Coral'
	 * 	|'CornflowerBlue'|'Cornsilk'|'Crimson'|'Cyan'|'DarkBlue'|'DarkCyan'|'DarkGoldenRod'|'DarkGray'
	 * 	|'DarkGreen'|'DarkGrey'|'DarkKhaki'|'DarkMagenta'|'DarkOliveGreen'|'DarkOrchid'|'DarkRed'
	 * 	|'DarkSalmo'|'DarkSeaGreen'|'DarkSlateBlue'|'DarkSlateGray'|'DarkSlateGrey'|'DarkTurquoise'
	 * 	|'DarkViolet'|'Darkorange'|'DeepPink'|'DeepSkyBlue'|'DimGray'|'DimGrey'|'DodgerBlue'
	 * 	|'FireBrick'|'FloralWhite'|'ForestGreen'|'Fuchsia'|'Gainsboro'|'GhostWhite'|'Gold'
	 * 	|'GoldenRod'|'Gray'|'Green'|'GreenYellow'|'Grey'|'HoneyDew'|'HotPink'|'IndianRed'
	 * 	|'Indigo'|'Ivory'|'Khaki'|'Lavender'|'LavenderBlush'|'LawnGreen'|'LemonChiffon'
	 * 	|'LightBlue'|'LightCoral'|'LightCyan'|'LightGoldenRodYellow'|'LightGray'|'LightGreen'
	 * 	|'LightGrey'|'LightPink'|'LightSalmon'|'LightSeaGreen'|'LightSkyBlue'|'LightSlateGray'
	 * 	|'LightSlateGrey'|'LightSteelBlue'|'LightYellow'|'Lime'|'LimeGreen'|'Linen'|'Magenta'
	 * 	|'Maroon'|'MediumAquaMarine'|'MediumBlue'|'MediumOrchid'|'MediumPurple'|'MediumSeaGreen'
	 * 	|'MediumSlateBlue'|'MediumSpringGreen'|'MediumTurquoise'|'MediumVioletRed'
	 * 	|'MidnightBlue'|'MintCream'|'MistyRose'|'Moccasin'|'NavajoWhite'|'Navy'|'OldLace'
	 * 	|'Olive'|'OliveDrab'|'OrangeRed'|'Orchid'|'PaleGoldenRod'|'PaleGreen'
	 * 	|'PaleTurquoise'|'PaleVioletRed'|'PapayaWhip'|'PeachPuff'|'Peru'|'Pink'|'Plum'
	 * 	|'PowderBlue'|'Purple'|'Red'|'RosyBrown'|'RoyalBlue'|'SaddleBrown'
	 * 	|'Salmon'|'SandyBrown'|'SeaGreen'|'Sienna'|'Silver'|'SkyBlue'|'SlateBlue'
	 * 	|'SlateGray'|'SlateGrey'|'Snow'|'SpringGreen'|'SteelBlue'|'Tan'|'Teal'|'Thistle'
	 * 	|'Tomato'|'Turquoise'|'Violet'|'Wheat'|'White'|'WhiteSmoke'|'Yellow'|'YellowGreen')
	 * ;
	 */
	protected String getColorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "#AliceBlue";
	}
	
	/**
	 * Delay:
	 * 	'...' ID* '...'
	 * ;
	 */
	protected String getDelayToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "......";
	}
	
	/**
	 * Divider:
	 * 	'==' ID '=='
	 * ;
	 */
	protected String getDividerToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "====";
	}
	
	/**
	 * Hidefootbox:
	 * 	'hide footbox'
	 * ;
	 */
	protected String getHidefootboxToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "hide footbox";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_' | 'å' | 'ä' | 'ö') ('a'..'z'|'A'..'Z'|'_'|'0'..'9' | 'å' | 'ä' | 'ö')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Legend:
	 * 	'legend' ('right' | 'left' | 'center')?  ((NEWLINE ID|NEWLINE)?)* NEWLINE 'endlegend'
	 * ;
	 */
	protected String getLegendToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "legend\nendlegend";
	}
	
	/**
	 * terminal NEWLINE 	: ('\r'? '\n');
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * Newpage:
	 * 	'newpage' (ID)?
	 * ;
	 */
	protected String getNewpageToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "newpage";
	}
	
	/**
	 * Note:
	 * 	'note' (('right' ('of' ID (',' ID)*)?)|('left' ('of' ID(',' ID)*)?)|('over' ID(',' ID)*)) (Color)* (':' ID| (NEWLINE ID)* NEWLINE 'end note')
	 * ;
	 */
	protected String getNoteToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "noteright:";
	}
	
	/**
	 * Reference:
	 * 	'ref over' ID (',' ID)* ((':' ID)|((NEWLINE ID)*) NEWLINE 'end ref') 
	 * ;
	 */
	protected String getReferenceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ref over:";
	}
	
	/**
	 * terminal SEQUENCE:
	 * 	('\u002D')* '\u002D' '\u003E'								| '\u003C' '\u002D' ('\u002D')* 							| '\u002D' '\u003E' 'x'										| 'x' '\u003C' '\u002D' 									| ('\u002D')* '\u002D' '\u003E' '\u003E'					| '\u003C' '\u003C' '\u002D' ('\u002D')*					| ('\u002D')* '\u002D' '\u005C' '\u005C'					| '\u002F' '\u002D' ('\u002D')*								| '\u002F' '\u002F' '\u002D' ('\u002D')*					| ('\u002D')* '\u002D' '\u003E' 'o'							| 'o' '\u003C' '\u002D' ('\u002D')*							| ('\u002D')* '\u002D' '\u002D' '\u002F' '\u002F' 'o'		| 'o' '\\\\' '\u002D' '\u002D' ('\u002D')* 					| '\u003C' '\u002D' '\u003E' 								| '\u003C' '\u002D' '\u003E' 'o' 							| 'o' '\u003C' '\u002D' '\u003E' 							| '\u003C' '\u007C' '\u002D' '\u002D' 						| '\u002D' '\u002D' '\u007C' '\u003E' 						| '\u002E' '\u002E' 										| '\u002E'												;
	 */
	protected String getSEQUENCEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "->";
	}
	
	/**
	 * Space:
	 * 	('|||'|('||' INT '||'))
	 * ;
	 */
	protected String getSpaceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "|||";
	}
	
	/**
	 * Title:
	 * 	'title' ID
	 * ;
	 */
	protected String getTitleToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "title";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_GroupingMessages_BreakKeyword_0_3_or_CriticalKeyword_0_4_or_LoopKeyword_0_1_or_OptKeyword_0_0_or_ParKeyword_0_2.equals(syntax))
				emit_GroupingMessages_BreakKeyword_0_3_or_CriticalKeyword_0_4_or_LoopKeyword_0_1_or_OptKeyword_0_0_or_ParKeyword_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Instruction_ColorParserRuleCall_0_1_1_q.equals(syntax))
				emit_Instruction_ColorParserRuleCall_0_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Instruction___AutoNumberParserRuleCall_0_2_or_DelayParserRuleCall_0_11_or_DividerParserRuleCall_0_9_or_HidefootboxParserRuleCall_0_13_or_LegendParserRuleCall_0_4_or_NewpageParserRuleCall_0_5_or_NoteParserRuleCall_0_8_or_ReferenceParserRuleCall_0_10_or_SpaceParserRuleCall_0_12_or_TitleParserRuleCall_0_3__q.equals(syntax))
				emit_Instruction___AutoNumberParserRuleCall_0_2_or_DelayParserRuleCall_0_11_or_DividerParserRuleCall_0_9_or_HidefootboxParserRuleCall_0_13_or_LegendParserRuleCall_0_4_or_NewpageParserRuleCall_0_5_or_NoteParserRuleCall_0_8_or_ReferenceParserRuleCall_0_10_or_SpaceParserRuleCall_0_12_or_TitleParserRuleCall_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Instruction___ColonKeyword_0_0_3_0_IDTerminalRuleCall_0_0_3_1__q.equals(syntax))
				emit_Instruction___ColonKeyword_0_0_3_0_IDTerminalRuleCall_0_0_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'opt' | 'loop' | 'par' | 'break' | 'critical'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ID NEWLINE 'end' (rule start)
	 *     (rule start) (ambiguity) ID NEWLINE instructions+=Instruction
	 */
	protected void emit_GroupingMessages_BreakKeyword_0_3_or_CriticalKeyword_0_4_or_LoopKeyword_0_1_or_OptKeyword_0_0_or_ParKeyword_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Color?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) NEWLINE (rule end)
	 */
	protected void emit_Instruction_ColorParserRuleCall_0_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         AutoNumber | 
	  *         Title | 
	  *         Legend | 
	  *         Newpage | 
	  *         Note | 
	  *         Divider | 
	  *         Reference | 
	  *         Delay | 
	  *         Space | 
	  *         Hidefootbox
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) NEWLINE (rule start)
	 */
	protected void emit_Instruction___AutoNumberParserRuleCall_0_2_or_DelayParserRuleCall_0_11_or_DividerParserRuleCall_0_9_or_HidefootboxParserRuleCall_0_13_or_LegendParserRuleCall_0_4_or_NewpageParserRuleCall_0_5_or_NoteParserRuleCall_0_8_or_ReferenceParserRuleCall_0_10_or_SpaceParserRuleCall_0_12_or_TitleParserRuleCall_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (':' ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name2=ID (ambiguity) NEWLINE (rule end)
	 */
	protected void emit_Instruction___ColonKeyword_0_0_3_0_IDTerminalRuleCall_0_0_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
