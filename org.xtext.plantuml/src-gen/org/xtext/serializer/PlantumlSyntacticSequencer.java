/*
 * generated by Xtext
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.services.PlantumlGrammarAccess;

@SuppressWarnings("all")
public class PlantumlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PlantumlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Instruction_AutoNumberParserRuleCall_4_or_ML_COMMENTTerminalRuleCall_1_or_SL_COMMENTTerminalRuleCall_2;
	protected AbstractElementAlias match_Instruction___ColonKeyword_0_3_0_IDTerminalRuleCall_0_3_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PlantumlGrammarAccess) access;
		match_Instruction_AutoNumberParserRuleCall_4_or_ML_COMMENTTerminalRuleCall_1_or_SL_COMMENTTerminalRuleCall_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInstructionAccess().getAutoNumberParserRuleCall_4()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getML_COMMENTTerminalRuleCall_1()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getSL_COMMENTTerminalRuleCall_2()));
		match_Instruction___ColonKeyword_0_3_0_IDTerminalRuleCall_0_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getInstructionAccess().getColonKeyword_0_3_0()), new TokenAlias(false, false, grammarAccess.getInstructionAccess().getIDTerminalRuleCall_0_3_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getAutoNumberRule())
			return getAutoNumberToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getML_COMMENTRule())
			return getML_COMMENTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSL_COMMENTRule())
			return getSL_COMMENTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSequenceRule())
			return getSequenceToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * AutoNumber:
	 * 	'autonumber' (INT (INT)?)?
	 * ;
	 */
	protected String getAutoNumberToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "autonumber";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal ML_COMMENT : '/\'' -> '\'/';
	 */
	protected String getML_COMMENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "/\'";
	}
	
	/**
	 * terminal SL_COMMENT : '\'' !('\n'|'\r')* ('\r'? '\n')?;
	 */
	protected String getSL_COMMENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\'";
	}
	
	/**
	 * Sequence:
	 * 	('\u002D')* '\u002D' '\u003E'							| '\u003C' '\u002D' ('\u002D')* 							| '\u002D' '\u003E' 'x'										| 'x' '\u003C' '\u002D' 									| ('\u002D')* '\u002D' '\u003E' '\u003E'					| '\u003C' '\u003C' '\u002D' ('\u002D')*					| ('\u002D')* '\u002D' '\\' '\\'							| '\u002F' '\u002D' ('\u002D')*								| ('\u002D')* '\u002D' '\\\\' 								| '\u002F' '\u002F' '\u002D' ('\u002D')*					| ('\u002D')* '\u002D' '\u003E' 'o'							| 'o' '\u003C' '\u002D' ('\u002D')*							| ('\u002D')* '\u002D' '\u002D' '\u002F' '\u002F' 'o'		| 'o' '\\\\' '\u002D' '\u002D' ('\u002D')* 					| '\u003C' '\u002D' '\u003E' 								| '\u003C' '\u002D' '\u003E' 'o' 							| 'o' '\u003C' '\u002D' '\u003E' 							| '\u003C' '\u007C' '\u002D' '\u002D' 						| '\u002D' '\u002D' '\u007C' '\u003E' 						| '\u002E' '\u002E' 										| '\u002E'													
	 * ;
	 */
	protected String getSequenceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "->";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Instruction_AutoNumberParserRuleCall_4_or_ML_COMMENTTerminalRuleCall_1_or_SL_COMMENTTerminalRuleCall_2.equals(syntax))
				emit_Instruction_AutoNumberParserRuleCall_4_or_ML_COMMENTTerminalRuleCall_1_or_SL_COMMENTTerminalRuleCall_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Instruction___ColonKeyword_0_3_0_IDTerminalRuleCall_0_3_1__q.equals(syntax))
				emit_Instruction___ColonKeyword_0_3_0_IDTerminalRuleCall_0_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ML_COMMENT | SL_COMMENT | AutoNumber
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Instruction_AutoNumberParserRuleCall_4_or_ML_COMMENTTerminalRuleCall_1_or_SL_COMMENTTerminalRuleCall_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (':' ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_Instruction___ColonKeyword_0_3_0_IDTerminalRuleCall_0_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
