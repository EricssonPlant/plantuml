/*
 * generated by Xtext
 */
parser grammar InternalPlantumlParser;

options {
	tokenVocab=InternalPlantumlLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.PlantumlGrammarAccess;

}

@members {


	private PlantumlGrammarAccess grammarAccess;
	 	
	public InternalPlantumlParser(TokenStream input, PlantumlGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Plantuml";	
	} 
	   	   	
	@Override
	protected PlantumlGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRulePlantuml
entryRulePlantuml returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPlantumlRule()); }
	 iv_rulePlantuml=rulePlantuml 
	 { $current=$iv_rulePlantuml.current; } 
	 EOF 
;

// Rule Plantuml
rulePlantuml returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlantumlAccess().getDiagramsDiagramParserRuleCall_0()); 
	    }
		lv_diagrams_0_0=ruleDiagram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlantumlRule());
	        }
       		add(
       			$current, 
       			"diagrams",
        		lv_diagrams_0_0, 
        		"Diagram");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDiagram
entryRuleDiagram returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDiagramRule()); }
	 iv_ruleDiagram=ruleDiagram 
	 { $current=$iv_ruleDiagram.current; } 
	 EOF 
;

// Rule Diagram
ruleDiagram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDiagramAccess().getDiagramAction_0(),
            $current);
    }
)this_START_1=RULE_START
    { 
    newLeafNode(this_START_1, grammarAccess.getDiagramAccess().getSTARTTerminalRuleCall_1()); 
    }
this_NEWLINE_2=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_2, grammarAccess.getDiagramAccess().getNEWLINETerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDiagramAccess().getInstructionsInstructionParserRuleCall_3_0()); 
	    }
		lv_instructions_3_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDiagramRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_3_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_END_4=RULE_END
    { 
    newLeafNode(this_END_4, grammarAccess.getDiagramAccess().getENDTerminalRuleCall_4()); 
    }
(this_NEWLINE_5=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_5, grammarAccess.getDiagramAccess().getNEWLINETerminalRuleCall_5()); 
    }
)*)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getArrowParserRuleCall_0_0()); 
    }
    this_Arrow_0=ruleArrow
    {
        $current = $this_Arrow_0.current;
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDefinitionParserRuleCall_0_1_0()); 
    }
    this_Definition_1=ruleDefinition
    {
        $current = $this_Definition_1.current;
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getColorParserRuleCall_0_1_1()); 
    }
ruleColor
    {
        afterParserOrEnumRuleCall();
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getAutoNumberParserRuleCall_0_2()); 
    }
ruleAutoNumber
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getTitleParserRuleCall_0_3()); 
    }
ruleTitle
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getLegendParserRuleCall_0_4()); 
    }
ruleLegend
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getNewpageParserRuleCall_0_5()); 
    }
ruleNewpage
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getAltElseParserRuleCall_0_6()); 
    }
    this_AltElse_7=ruleAltElse
    {
        $current = $this_AltElse_7.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getGroupingMessagesParserRuleCall_0_7()); 
    }
    this_GroupingMessages_8=ruleGroupingMessages
    {
        $current = $this_GroupingMessages_8.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getNoteParserRuleCall_0_8()); 
    }
    this_Note_9=ruleNote
    {
        $current = $this_Note_9.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDividerParserRuleCall_0_9()); 
    }
ruleDivider
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getReferenceParserRuleCall_0_10()); 
    }
    this_Reference_11=ruleReference
    {
        $current = $this_Reference_11.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDelayParserRuleCall_0_11()); 
    }
ruleDelay
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getSpaceParserRuleCall_0_12()); 
    }
ruleSpace
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getHidefootboxParserRuleCall_0_13()); 
    }
ruleHidefootbox
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getActivateParserRuleCall_0_14()); 
    }
    this_Activate_15=ruleActivate
    {
        $current = $this_Activate_15.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDeactivateParserRuleCall_0_15()); 
    }
    this_Deactivate_16=ruleDeactivate
    {
        $current = $this_Deactivate_16.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getParticipantCreationParserRuleCall_0_16()); 
    }
ruleParticipantCreation
    {
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getBoxParserRuleCall_0_17()); 
    }
    this_Box_18=ruleBox
    {
        $current = $this_Box_18.current;
        afterParserOrEnumRuleCall();
    }
)?this_NEWLINE_19=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_19, grammarAccess.getInstructionAccess().getNEWLINETerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRuleArrow
entryRuleArrow returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrowRule()); }
	 iv_ruleArrow=ruleArrow 
	 { $current=$iv_ruleArrow.current; } 
	 EOF 
;

// Rule Arrow
ruleArrow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArrowAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrowRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)this_SEQUENCE_1=RULE_SEQUENCE
    { 
    newLeafNode(this_SEQUENCE_1, grammarAccess.getArrowAccess().getSEQUENCETerminalRuleCall_1()); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getArrowAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrowRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
	otherlv_3=Colon
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrowAccess().getColonKeyword_3_0());
    }
(this_ID_4=RULE_ID
    { 
    newLeafNode(this_ID_4, grammarAccess.getArrowAccess().getIDTerminalRuleCall_3_1()); 
    }
)*)?)
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Actor
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getActorKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
    |(
	otherlv_2=Boundary
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefinitionAccess().getBoundaryKeyword_1_0());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))
    |(
	otherlv_4=Control
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getControlKeyword_2_0());
    }
(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
))
    |(
	otherlv_6=Entity
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionAccess().getEntityKeyword_3_0());
    }
(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
))
    |(
	otherlv_8=Database
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefinitionAccess().getDatabaseKeyword_4_0());
    }
(
(
		lv_name_9_0=RULE_ID
		{
			newLeafNode(lv_name_9_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"ID");
	    }

)
))
    |(
	otherlv_10=Participant
    {
    	newLeafNode(otherlv_10, grammarAccess.getDefinitionAccess().getParticipantKeyword_5_0());
    }
(
(
		lv_name_11_0=RULE_ID
		{
			newLeafNode(lv_name_11_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_11_0, 
        		"ID");
	    }

)
)(
	otherlv_12=LessThanSignLessThanSign
    {
    	newLeafNode(otherlv_12, grammarAccess.getDefinitionAccess().getLessThanSignLessThanSignKeyword_5_2_0());
    }
((
	otherlv_13=LeftParenthesis
    {
    	newLeafNode(otherlv_13, grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_5_2_1_0_0());
    }
this_ID_14=RULE_ID
    { 
    newLeafNode(this_ID_14, grammarAccess.getDefinitionAccess().getIDTerminalRuleCall_5_2_1_0_1()); 
    }

	otherlv_15=Comma
    {
    	newLeafNode(otherlv_15, grammarAccess.getDefinitionAccess().getCommaKeyword_5_2_1_0_2());
    }

    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getColorParserRuleCall_5_2_1_0_3()); 
    }
ruleColor
    {
        afterParserOrEnumRuleCall();
    }

	otherlv_17=RightParenthesis
    {
    	newLeafNode(otherlv_17, grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_5_2_1_0_4());
    }
)
    |(
	otherlv_18=LeftParenthesis
    {
    	newLeafNode(otherlv_18, grammarAccess.getDefinitionAccess().getLeftParenthesisKeyword_5_2_1_1_0());
    }
this_ID_19=RULE_ID
    { 
    newLeafNode(this_ID_19, grammarAccess.getDefinitionAccess().getIDTerminalRuleCall_5_2_1_1_1()); 
    }

	otherlv_20=Comma
    {
    	newLeafNode(otherlv_20, grammarAccess.getDefinitionAccess().getCommaKeyword_5_2_1_1_2());
    }

    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getColorParserRuleCall_5_2_1_1_3()); 
    }
ruleColor
    {
        afterParserOrEnumRuleCall();
    }

	otherlv_22=RightParenthesis
    {
    	newLeafNode(otherlv_22, grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_5_2_1_1_4());
    }
this_ID_23=RULE_ID
    { 
    newLeafNode(this_ID_23, grammarAccess.getDefinitionAccess().getIDTerminalRuleCall_5_2_1_1_5()); 
    }
)
    |this_ID_24=RULE_ID
    { 
    newLeafNode(this_ID_24, grammarAccess.getDefinitionAccess().getIDTerminalRuleCall_5_2_1_2()); 
    }
)
	otherlv_25=GreaterThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_25, grammarAccess.getDefinitionAccess().getGreaterThanSignGreaterThanSignKeyword_5_2_2());
    }
)?))
;





// Entry rule entryRuleAutoNumber
entryRuleAutoNumber returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getAutoNumberRule()); } 
	 iv_ruleAutoNumber=ruleAutoNumber 
	 { $current=$iv_ruleAutoNumber.current.getText(); }  
	 EOF 
;

// Rule AutoNumber
ruleAutoNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Autonumber 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAutoNumberAccess().getAutonumberKeyword_0()); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getAutoNumberAccess().getINTTerminalRuleCall_1_0()); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getAutoNumberAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)?)
    ;





// Entry rule entryRuleColor
entryRuleColor returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getColorRule()); } 
	 iv_ruleColor=ruleColor 
	 { $current=$iv_ruleColor.current.getText(); }  
	 EOF 
;

// Rule Color
ruleColor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=NumberSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getNumberSignKeyword_0()); 
    }
(
	kw=AliceBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAliceBlueKeyword_1_0()); 
    }

    |
	kw=AntiqueWhite 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAntiqueWhiteKeyword_1_1()); 
    }

    |
	kw=Aqua 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAquaKeyword_1_2()); 
    }

    |
	kw=Aquamarine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAquamarineKeyword_1_3()); 
    }

    |
	kw=Azure 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getAzureKeyword_1_4()); 
    }

    |
	kw=Beige 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBeigeKeyword_1_5()); 
    }

    |
	kw=Bisque 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBisqueKeyword_1_6()); 
    }

    |
	kw=Black 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlackKeyword_1_7()); 
    }

    |
	kw=BlanchedAlmond 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlanchedAlmondKeyword_1_8()); 
    }

    |
	kw=Blue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlueKeyword_1_9()); 
    }

    |
	kw=BlueViolet 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBlueVioletKeyword_1_10()); 
    }

    |
	kw=Brown 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBrownKeyword_1_11()); 
    }

    |
	kw=BurlyWood 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getBurlyWoodKeyword_1_12()); 
    }

    |
	kw=CadetBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCadetBlueKeyword_1_13()); 
    }

    |
	kw=Chartreuse 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getChartreuseKeyword_1_14()); 
    }

    |
	kw=Chocolate 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getChocolateKeyword_1_15()); 
    }

    |
	kw=Coral 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCoralKeyword_1_16()); 
    }

    |
	kw=CornflowerBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCornflowerBlueKeyword_1_17()); 
    }

    |
	kw=Cornsilk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCornsilkKeyword_1_18()); 
    }

    |
	kw=Crimson 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCrimsonKeyword_1_19()); 
    }

    |
	kw=Cyan 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getCyanKeyword_1_20()); 
    }

    |
	kw=DarkBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkBlueKeyword_1_21()); 
    }

    |
	kw=DarkCyan 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkCyanKeyword_1_22()); 
    }

    |
	kw=DarkGoldenRod 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGoldenRodKeyword_1_23()); 
    }

    |
	kw=DarkGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGrayKeyword_1_24()); 
    }

    |
	kw=DarkGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGreenKeyword_1_25()); 
    }

    |
	kw=DarkGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkGreyKeyword_1_26()); 
    }

    |
	kw=DarkKhaki 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkKhakiKeyword_1_27()); 
    }

    |
	kw=DarkMagenta 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkMagentaKeyword_1_28()); 
    }

    |
	kw=DarkOliveGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkOliveGreenKeyword_1_29()); 
    }

    |
	kw=DarkOrchid 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkOrchidKeyword_1_30()); 
    }

    |
	kw=DarkRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkRedKeyword_1_31()); 
    }

    |
	kw=DarkSalmo 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSalmoKeyword_1_32()); 
    }

    |
	kw=DarkSeaGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSeaGreenKeyword_1_33()); 
    }

    |
	kw=DarkSlateBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSlateBlueKeyword_1_34()); 
    }

    |
	kw=DarkSlateGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSlateGrayKeyword_1_35()); 
    }

    |
	kw=DarkSlateGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkSlateGreyKeyword_1_36()); 
    }

    |
	kw=DarkTurquoise 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkTurquoiseKeyword_1_37()); 
    }

    |
	kw=DarkViolet 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkVioletKeyword_1_38()); 
    }

    |
	kw=Darkorange 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDarkorangeKeyword_1_39()); 
    }

    |
	kw=DeepPink 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDeepPinkKeyword_1_40()); 
    }

    |
	kw=DeepSkyBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDeepSkyBlueKeyword_1_41()); 
    }

    |
	kw=DimGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDimGrayKeyword_1_42()); 
    }

    |
	kw=DimGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDimGreyKeyword_1_43()); 
    }

    |
	kw=DodgerBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getDodgerBlueKeyword_1_44()); 
    }

    |
	kw=FireBrick 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getFireBrickKeyword_1_45()); 
    }

    |
	kw=FloralWhite 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getFloralWhiteKeyword_1_46()); 
    }

    |
	kw=ForestGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getForestGreenKeyword_1_47()); 
    }

    |
	kw=Fuchsia 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getFuchsiaKeyword_1_48()); 
    }

    |
	kw=Gainsboro 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGainsboroKeyword_1_49()); 
    }

    |
	kw=GhostWhite 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGhostWhiteKeyword_1_50()); 
    }

    |
	kw=Gold 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGoldKeyword_1_51()); 
    }

    |
	kw=GoldenRod 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGoldenRodKeyword_1_52()); 
    }

    |
	kw=Gray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGrayKeyword_1_53()); 
    }

    |
	kw=Green 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGreenKeyword_1_54()); 
    }

    |
	kw=GreenYellow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGreenYellowKeyword_1_55()); 
    }

    |
	kw=Grey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getGreyKeyword_1_56()); 
    }

    |
	kw=HoneyDew 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getHoneyDewKeyword_1_57()); 
    }

    |
	kw=HotPink 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getHotPinkKeyword_1_58()); 
    }

    |
	kw=IndianRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getIndianRedKeyword_1_59()); 
    }

    |
	kw=Indigo 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getIndigoKeyword_1_60()); 
    }

    |
	kw=Ivory 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getIvoryKeyword_1_61()); 
    }

    |
	kw=Khaki 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getKhakiKeyword_1_62()); 
    }

    |
	kw=Lavender 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLavenderKeyword_1_63()); 
    }

    |
	kw=LavenderBlush 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLavenderBlushKeyword_1_64()); 
    }

    |
	kw=LawnGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLawnGreenKeyword_1_65()); 
    }

    |
	kw=LemonChiffon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLemonChiffonKeyword_1_66()); 
    }

    |
	kw=LightBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightBlueKeyword_1_67()); 
    }

    |
	kw=LightCoral 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightCoralKeyword_1_68()); 
    }

    |
	kw=LightCyan 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightCyanKeyword_1_69()); 
    }

    |
	kw=LightGoldenRodYellow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGoldenRodYellowKeyword_1_70()); 
    }

    |
	kw=LightGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGrayKeyword_1_71()); 
    }

    |
	kw=LightGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGreenKeyword_1_72()); 
    }

    |
	kw=LightGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightGreyKeyword_1_73()); 
    }

    |
	kw=LightPink 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightPinkKeyword_1_74()); 
    }

    |
	kw=LightSalmon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSalmonKeyword_1_75()); 
    }

    |
	kw=LightSeaGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSeaGreenKeyword_1_76()); 
    }

    |
	kw=LightSkyBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSkyBlueKeyword_1_77()); 
    }

    |
	kw=LightSlateGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSlateGrayKeyword_1_78()); 
    }

    |
	kw=LightSlateGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSlateGreyKeyword_1_79()); 
    }

    |
	kw=LightSteelBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightSteelBlueKeyword_1_80()); 
    }

    |
	kw=LightYellow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLightYellowKeyword_1_81()); 
    }

    |
	kw=Lime 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLimeKeyword_1_82()); 
    }

    |
	kw=LimeGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLimeGreenKeyword_1_83()); 
    }

    |
	kw=Linen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getLinenKeyword_1_84()); 
    }

    |
	kw=Magenta 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMagentaKeyword_1_85()); 
    }

    |
	kw=Maroon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMaroonKeyword_1_86()); 
    }

    |
	kw=MediumAquaMarine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumAquaMarineKeyword_1_87()); 
    }

    |
	kw=MediumBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumBlueKeyword_1_88()); 
    }

    |
	kw=MediumOrchid 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumOrchidKeyword_1_89()); 
    }

    |
	kw=MediumPurple 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumPurpleKeyword_1_90()); 
    }

    |
	kw=MediumSeaGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumSeaGreenKeyword_1_91()); 
    }

    |
	kw=MediumSlateBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumSlateBlueKeyword_1_92()); 
    }

    |
	kw=MediumSpringGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumSpringGreenKeyword_1_93()); 
    }

    |
	kw=MediumTurquoise 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumTurquoiseKeyword_1_94()); 
    }

    |
	kw=MediumVioletRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMediumVioletRedKeyword_1_95()); 
    }

    |
	kw=MidnightBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMidnightBlueKeyword_1_96()); 
    }

    |
	kw=MintCream 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMintCreamKeyword_1_97()); 
    }

    |
	kw=MistyRose 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMistyRoseKeyword_1_98()); 
    }

    |
	kw=Moccasin 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getMoccasinKeyword_1_99()); 
    }

    |
	kw=NavajoWhite 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getNavajoWhiteKeyword_1_100()); 
    }

    |
	kw=Navy 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getNavyKeyword_1_101()); 
    }

    |
	kw=OldLace 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOldLaceKeyword_1_102()); 
    }

    |
	kw=Olive 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOliveKeyword_1_103()); 
    }

    |
	kw=OliveDrab 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOliveDrabKeyword_1_104()); 
    }

    |
	kw=OrangeRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOrangeRedKeyword_1_105()); 
    }

    |
	kw=Orchid 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getOrchidKeyword_1_106()); 
    }

    |
	kw=PaleGoldenRod 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleGoldenRodKeyword_1_107()); 
    }

    |
	kw=PaleGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleGreenKeyword_1_108()); 
    }

    |
	kw=PaleTurquoise 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleTurquoiseKeyword_1_109()); 
    }

    |
	kw=PaleVioletRed 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPaleVioletRedKeyword_1_110()); 
    }

    |
	kw=PapayaWhip 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPapayaWhipKeyword_1_111()); 
    }

    |
	kw=PeachPuff 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPeachPuffKeyword_1_112()); 
    }

    |
	kw=Peru 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPeruKeyword_1_113()); 
    }

    |
	kw=Pink 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPinkKeyword_1_114()); 
    }

    |
	kw=Plum 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPlumKeyword_1_115()); 
    }

    |
	kw=PowderBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPowderBlueKeyword_1_116()); 
    }

    |
	kw=Purple 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getPurpleKeyword_1_117()); 
    }

    |
	kw=Red 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getRedKeyword_1_118()); 
    }

    |
	kw=RosyBrown 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getRosyBrownKeyword_1_119()); 
    }

    |
	kw=RoyalBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getRoyalBlueKeyword_1_120()); 
    }

    |
	kw=SaddleBrown 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSaddleBrownKeyword_1_121()); 
    }

    |
	kw=Salmon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSalmonKeyword_1_122()); 
    }

    |
	kw=SandyBrown 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSandyBrownKeyword_1_123()); 
    }

    |
	kw=SeaGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSeaGreenKeyword_1_124()); 
    }

    |
	kw=Sienna 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSiennaKeyword_1_125()); 
    }

    |
	kw=Silver 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSilverKeyword_1_126()); 
    }

    |
	kw=SkyBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSkyBlueKeyword_1_127()); 
    }

    |
	kw=SlateBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSlateBlueKeyword_1_128()); 
    }

    |
	kw=SlateGray 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSlateGrayKeyword_1_129()); 
    }

    |
	kw=SlateGrey 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSlateGreyKeyword_1_130()); 
    }

    |
	kw=Snow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSnowKeyword_1_131()); 
    }

    |
	kw=SpringGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSpringGreenKeyword_1_132()); 
    }

    |
	kw=SteelBlue 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getSteelBlueKeyword_1_133()); 
    }

    |
	kw=Tan 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTanKeyword_1_134()); 
    }

    |
	kw=Teal 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTealKeyword_1_135()); 
    }

    |
	kw=Thistle 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getThistleKeyword_1_136()); 
    }

    |
	kw=Tomato 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTomatoKeyword_1_137()); 
    }

    |
	kw=Turquoise 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getTurquoiseKeyword_1_138()); 
    }

    |
	kw=Violet 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getVioletKeyword_1_139()); 
    }

    |
	kw=Wheat 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getWheatKeyword_1_140()); 
    }

    |
	kw=White 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getWhiteKeyword_1_141()); 
    }

    |
	kw=WhiteSmoke 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getWhiteSmokeKeyword_1_142()); 
    }

    |
	kw=Yellow 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getYellowKeyword_1_143()); 
    }

    |
	kw=YellowGreen 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColorAccess().getYellowGreenKeyword_1_144()); 
    }
))
    ;





// Entry rule entryRuleTitle
entryRuleTitle returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTitleRule()); } 
	 iv_ruleTitle=ruleTitle 
	 { $current=$iv_ruleTitle.current.getText(); }  
	 EOF 
;

// Rule Title
ruleTitle returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Title 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTitleAccess().getTitleKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getTitleAccess().getIDTerminalRuleCall_1()); 
    }
)*)
    ;





// Entry rule entryRuleLegend
entryRuleLegend returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLegendRule()); } 
	 iv_ruleLegend=ruleLegend 
	 { $current=$iv_ruleLegend.current.getText(); }  
	 EOF 
;

// Rule Legend
ruleLegend returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Legend 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getLegendKeyword_0()); 
    }
(
	kw=Right 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getRightKeyword_1_0()); 
    }

    |
	kw=Left 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getLeftKeyword_1_1()); 
    }

    |
	kw=Center 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getCenterKeyword_1_2()); 
    }
)?(    this_NEWLINE_4=RULE_NEWLINE    {
		$current.merge(this_NEWLINE_4);
    }

    { 
    newLeafNode(this_NEWLINE_4, grammarAccess.getLegendAccess().getNEWLINETerminalRuleCall_2_0()); 
    }
(    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getLegendAccess().getIDTerminalRuleCall_2_1()); 
    }
)*)*
	kw=Endlegend 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLegendAccess().getEndlegendKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleNewpage
entryRuleNewpage returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNewpageRule()); } 
	 iv_ruleNewpage=ruleNewpage 
	 { $current=$iv_ruleNewpage.current.getText(); }  
	 EOF 
;

// Rule Newpage
ruleNewpage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Newpage 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNewpageAccess().getNewpageKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getNewpageAccess().getIDTerminalRuleCall_1()); 
    }
)*)
    ;





// Entry rule entryRuleAltElse
entryRuleAltElse returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAltElseRule()); }
	 iv_ruleAltElse=ruleAltElse 
	 { $current=$iv_ruleAltElse.current; } 
	 EOF 
;

// Rule AltElse
ruleAltElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAltElseAccess().getAltElseAction_0(),
            $current);
    }
)
	otherlv_1=Alt
    {
    	newLeafNode(otherlv_1, grammarAccess.getAltElseAccess().getAltKeyword_1());
    }
(this_ID_2=RULE_ID
    { 
    newLeafNode(this_ID_2, grammarAccess.getAltElseAccess().getIDTerminalRuleCall_2()); 
    }
)*this_NEWLINE_3=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_3, grammarAccess.getAltElseAccess().getNEWLINETerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAltElseAccess().getInstructionsInstructionParserRuleCall_4_0()); 
	    }
		lv_instructions_4_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAltElseRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_4_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAltElseAccess().getElsesElseParserRuleCall_5_0()); 
	    }
		lv_elses_5_0=ruleElse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAltElseRule());
	        }
       		add(
       			$current, 
       			"elses",
        		lv_elses_5_0, 
        		"Else");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_6=End
    {
    	newLeafNode(otherlv_6, grammarAccess.getAltElseAccess().getEndKeyword_6());
    }
)
;





// Entry rule entryRuleElse
entryRuleElse returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElseRule()); }
	 iv_ruleElse=ruleElse 
	 { $current=$iv_ruleElse.current; } 
	 EOF 
;

// Rule Else
ruleElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElseAccess().getElseAction_0(),
            $current);
    }
)
	otherlv_1=Else
    {
    	newLeafNode(otherlv_1, grammarAccess.getElseAccess().getElseKeyword_1());
    }
(this_ID_2=RULE_ID
    { 
    newLeafNode(this_ID_2, grammarAccess.getElseAccess().getIDTerminalRuleCall_2()); 
    }
)*this_NEWLINE_3=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_3, grammarAccess.getElseAccess().getNEWLINETerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseAccess().getInstructionsInstructionParserRuleCall_4_0()); 
	    }
		lv_instructions_4_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_4_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleGroupingMessages
entryRuleGroupingMessages returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupingMessagesRule()); }
	 iv_ruleGroupingMessages=ruleGroupingMessages 
	 { $current=$iv_ruleGroupingMessages.current; } 
	 EOF 
;

// Rule GroupingMessages
ruleGroupingMessages returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGroupingMessagesAccess().getGroupingMessageAction_0(),
            $current);
    }
)(
	otherlv_1=Opt
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroupingMessagesAccess().getOptKeyword_1_0());
    }

    |
	otherlv_2=Loop
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupingMessagesAccess().getLoopKeyword_1_1());
    }

    |
	otherlv_3=Par
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroupingMessagesAccess().getParKeyword_1_2());
    }

    |
	otherlv_4=Break
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupingMessagesAccess().getBreakKeyword_1_3());
    }

    |
	otherlv_5=Critical
    {
    	newLeafNode(otherlv_5, grammarAccess.getGroupingMessagesAccess().getCriticalKeyword_1_4());
    }

    |
	otherlv_6=Group
    {
    	newLeafNode(otherlv_6, grammarAccess.getGroupingMessagesAccess().getGroupKeyword_1_5());
    }
)(this_ID_7=RULE_ID
    { 
    newLeafNode(this_ID_7, grammarAccess.getGroupingMessagesAccess().getIDTerminalRuleCall_2()); 
    }
)*this_NEWLINE_8=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_8, grammarAccess.getGroupingMessagesAccess().getNEWLINETerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupingMessagesAccess().getInstructionsInstructionParserRuleCall_4_0()); 
	    }
		lv_instructions_9_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupingMessagesRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_9_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_10=End
    {
    	newLeafNode(otherlv_10, grammarAccess.getGroupingMessagesAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleNote
entryRuleNote returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNoteRule()); }
	 iv_ruleNote=ruleNote 
	 { $current=$iv_ruleNote.current; } 
	 EOF 
;

// Rule Note
ruleNote returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNoteAccess().getNoteAction_0(),
            $current);
    }
)
	otherlv_1=Note
    {
    	newLeafNode(otherlv_1, grammarAccess.getNoteAccess().getNoteKeyword_1());
    }
((
	otherlv_2=Right
    {
    	newLeafNode(otherlv_2, grammarAccess.getNoteAccess().getRightKeyword_2_0_0());
    }
(
	otherlv_3=Of
    {
    	newLeafNode(otherlv_3, grammarAccess.getNoteAccess().getOfKeyword_2_0_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getNoteAccess().getRidDefinitionCrossReference_2_0_1_1_0()); 
	}

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getNoteAccess().getCommaKeyword_2_0_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getNoteAccess().getRidsDefinitionCrossReference_2_0_1_2_1_0()); 
	}

)
))*)?)
    |(
	otherlv_7=Left
    {
    	newLeafNode(otherlv_7, grammarAccess.getNoteAccess().getLeftKeyword_2_1_0());
    }
(
	otherlv_8=Of
    {
    	newLeafNode(otherlv_8, grammarAccess.getNoteAccess().getOfKeyword_2_1_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getNoteAccess().getLidDefinitionCrossReference_2_1_1_1_0()); 
	}

)
)(
	otherlv_10=Comma
    {
    	newLeafNode(otherlv_10, grammarAccess.getNoteAccess().getCommaKeyword_2_1_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_11=RULE_ID
	{
		newLeafNode(otherlv_11, grammarAccess.getNoteAccess().getLidsDefinitionCrossReference_2_1_1_2_1_0()); 
	}

)
))*)?)
    |(
	otherlv_12=Over
    {
    	newLeafNode(otherlv_12, grammarAccess.getNoteAccess().getOverKeyword_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_13=RULE_ID
	{
		newLeafNode(otherlv_13, grammarAccess.getNoteAccess().getOidDefinitionCrossReference_2_2_1_0()); 
	}

)
)(
	otherlv_14=Comma
    {
    	newLeafNode(otherlv_14, grammarAccess.getNoteAccess().getCommaKeyword_2_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
        }
	otherlv_15=RULE_ID
	{
		newLeafNode(otherlv_15, grammarAccess.getNoteAccess().getOidsDefinitionCrossReference_2_2_2_1_0()); 
	}

)
))*))(
    { 
        newCompositeNode(grammarAccess.getNoteAccess().getColorParserRuleCall_3()); 
    }
ruleColor
    {
        afterParserOrEnumRuleCall();
    }
)*((
	otherlv_17=Colon
    {
    	newLeafNode(otherlv_17, grammarAccess.getNoteAccess().getColonKeyword_4_0_0());
    }
this_ID_18=RULE_ID
    { 
    newLeafNode(this_ID_18, grammarAccess.getNoteAccess().getIDTerminalRuleCall_4_0_1()); 
    }
)
    |((this_NEWLINE_19=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_19, grammarAccess.getNoteAccess().getNEWLINETerminalRuleCall_4_1_0_0()); 
    }
(this_ID_20=RULE_ID
    { 
    newLeafNode(this_ID_20, grammarAccess.getNoteAccess().getIDTerminalRuleCall_4_1_0_1()); 
    }
)*)*this_NEWLINE_21=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_21, grammarAccess.getNoteAccess().getNEWLINETerminalRuleCall_4_1_1()); 
    }

	otherlv_22=End
    {
    	newLeafNode(otherlv_22, grammarAccess.getNoteAccess().getEndKeyword_4_1_2());
    }

	otherlv_23=Note
    {
    	newLeafNode(otherlv_23, grammarAccess.getNoteAccess().getNoteKeyword_4_1_3());
    }
)))
;





// Entry rule entryRuleDivider
entryRuleDivider returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDividerRule()); } 
	 iv_ruleDivider=ruleDivider 
	 { $current=$iv_ruleDivider.current.getText(); }  
	 EOF 
;

// Rule Divider
ruleDivider returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=EqualsSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDividerAccess().getEqualsSignEqualsSignKeyword_0()); 
    }
(    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getDividerAccess().getIDTerminalRuleCall_1()); 
    }
)*
	kw=EqualsSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDividerAccess().getEqualsSignEqualsSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Ref
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceAccess().getRefKeyword_0());
    }

	otherlv_1=Over
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceAccess().getOverKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getReferenceAccess().getIdDefinitionCrossReference_2_0()); 
	}

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getReferenceAccess().getIdsDefinitionCrossReference_3_1_0()); 
	}

)
))*((
	otherlv_5=Colon
    {
    	newLeafNode(otherlv_5, grammarAccess.getReferenceAccess().getColonKeyword_4_0_0());
    }
(this_ID_6=RULE_ID
    { 
    newLeafNode(this_ID_6, grammarAccess.getReferenceAccess().getIDTerminalRuleCall_4_0_1()); 
    }
)*)
    |((this_NEWLINE_7=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_7, grammarAccess.getReferenceAccess().getNEWLINETerminalRuleCall_4_1_0_0()); 
    }
(this_ID_8=RULE_ID
    { 
    newLeafNode(this_ID_8, grammarAccess.getReferenceAccess().getIDTerminalRuleCall_4_1_0_1()); 
    }
)*)*
	otherlv_9=End
    {
    	newLeafNode(otherlv_9, grammarAccess.getReferenceAccess().getEndKeyword_4_1_1());
    }

	otherlv_10=Ref
    {
    	newLeafNode(otherlv_10, grammarAccess.getReferenceAccess().getRefKeyword_4_1_2());
    }
)))
;





// Entry rule entryRuleDelay
entryRuleDelay returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDelayRule()); } 
	 iv_ruleDelay=ruleDelay 
	 { $current=$iv_ruleDelay.current.getText(); }  
	 EOF 
;

// Rule Delay
ruleDelay returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=FullStopFullStopFullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelayAccess().getFullStopFullStopFullStopKeyword_0()); 
    }
((    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getDelayAccess().getIDTerminalRuleCall_1_0()); 
    }
)*
	kw=FullStopFullStopFullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelayAccess().getFullStopFullStopFullStopKeyword_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleSpace
entryRuleSpace returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSpaceRule()); } 
	 iv_ruleSpace=ruleSpace 
	 { $current=$iv_ruleSpace.current.getText(); }  
	 EOF 
;

// Rule Space
ruleSpace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=VerticalLineVerticalLineVerticalLine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getVerticalLineVerticalLineVerticalLineKeyword_0()); 
    }

    |(
	kw=VerticalLineVerticalLine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getVerticalLineVerticalLineKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getSpaceAccess().getINTTerminalRuleCall_1_1()); 
    }

	kw=VerticalLineVerticalLine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpaceAccess().getVerticalLineVerticalLineKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleHidefootbox
entryRuleHidefootbox returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getHidefootboxRule()); } 
	 iv_ruleHidefootbox=ruleHidefootbox 
	 { $current=$iv_ruleHidefootbox.current.getText(); }  
	 EOF 
;

// Rule Hidefootbox
ruleHidefootbox returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Hide 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHidefootboxAccess().getHideKeyword_0()); 
    }

	kw=Footbox 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHidefootboxAccess().getFootboxKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleActivate
entryRuleActivate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getActivateRule()); }
	 iv_ruleActivate=ruleActivate 
	 { $current=$iv_ruleActivate.current; } 
	 EOF 
;

// Rule Activate
ruleActivate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Activate
    {
    	newLeafNode(otherlv_0, grammarAccess.getActivateAccess().getActivateKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getActivateAccess().getColorParserRuleCall_1()); 
    }
ruleColor
    {
        afterParserOrEnumRuleCall();
    }
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getActivateAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActivateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleDeactivate
entryRuleDeactivate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDeactivateRule()); }
	 iv_ruleDeactivate=ruleDeactivate 
	 { $current=$iv_ruleDeactivate.current; } 
	 EOF 
;

// Rule Deactivate
ruleDeactivate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Deactivate
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeactivateAccess().getDeactivateKeyword_0_0());
    }

    |
	otherlv_1=Destroy
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeactivateAccess().getDestroyKeyword_0_1());
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeactivateRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getDeactivateAccess().getIdActivateCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleParticipantCreation
entryRuleParticipantCreation returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getParticipantCreationRule()); } 
	 iv_ruleParticipantCreation=ruleParticipantCreation 
	 { $current=$iv_ruleParticipantCreation.current.getText(); }  
	 EOF 
;

// Rule ParticipantCreation
ruleParticipantCreation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Create 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParticipantCreationAccess().getCreateKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getParticipantCreationAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleBox
entryRuleBox returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBoxRule()); }
	 iv_ruleBox=ruleBox 
	 { $current=$iv_ruleBox.current; } 
	 EOF 
;

// Rule Box
ruleBox returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBoxAccess().getBoxAction_0(),
            $current);
    }
)
	otherlv_1=Box
    {
    	newLeafNode(otherlv_1, grammarAccess.getBoxAccess().getBoxKeyword_1());
    }

	otherlv_2=QuotationMark
    {
    	newLeafNode(otherlv_2, grammarAccess.getBoxAccess().getQuotationMarkKeyword_2());
    }
(this_ID_3=RULE_ID
    { 
    newLeafNode(this_ID_3, grammarAccess.getBoxAccess().getIDTerminalRuleCall_3()); 
    }
)*
	otherlv_4=QuotationMark
    {
    	newLeafNode(otherlv_4, grammarAccess.getBoxAccess().getQuotationMarkKeyword_4());
    }
(
    { 
        newCompositeNode(grammarAccess.getBoxAccess().getColorParserRuleCall_5()); 
    }
ruleColor
    {
        afterParserOrEnumRuleCall();
    }
)?this_NEWLINE_6=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_6, grammarAccess.getBoxAccess().getNEWLINETerminalRuleCall_6()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBoxAccess().getDefinitionsDefinitionParserRuleCall_7_0_0()); 
	    }
		lv_definitions_7_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_7_0, 
        		"Definition");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_NEWLINE_8=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_8, grammarAccess.getBoxAccess().getNEWLINETerminalRuleCall_7_1()); 
    }
)*
	otherlv_9=End
    {
    	newLeafNode(otherlv_9, grammarAccess.getBoxAccess().getEndKeyword_8());
    }

	otherlv_10=Box
    {
    	newLeafNode(otherlv_10, grammarAccess.getBoxAccess().getBoxKeyword_9());
    }
)
;





