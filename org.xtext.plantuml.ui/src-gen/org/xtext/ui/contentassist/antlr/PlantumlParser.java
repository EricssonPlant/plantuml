/*
 * generated by Xtext
 */
package org.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.services.PlantumlGrammarAccess;

public class PlantumlParser extends AbstractContentAssistParser {
	
	@Inject
	private PlantumlGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ui.contentassist.antlr.internal.InternalPlantumlParser createParser() {
		org.xtext.ui.contentassist.antlr.internal.InternalPlantumlParser result = new org.xtext.ui.contentassist.antlr.internal.InternalPlantumlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstructionAccess().getAlternatives_0(), "rule__Instruction__Alternatives_0");
					put(grammarAccess.getInstructionAccess().getAlternatives_0_1_1(), "rule__Instruction__Alternatives_0_1_1");
					put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
					put(grammarAccess.getDefinitionAccess().getAlternatives_5_2_1(), "rule__Definition__Alternatives_5_2_1");
					put(grammarAccess.getLegendAccess().getAlternatives_1(), "rule__Legend__Alternatives_1");
					put(grammarAccess.getGroupingMessagesAccess().getAlternatives_0(), "rule__GroupingMessages__Alternatives_0");
					put(grammarAccess.getNoteAccess().getAlternatives_1(), "rule__Note__Alternatives_1");
					put(grammarAccess.getNoteAccess().getAlternatives_3(), "rule__Note__Alternatives_3");
					put(grammarAccess.getReferenceAccess().getAlternatives_4(), "rule__Reference__Alternatives_4");
					put(grammarAccess.getSpaceAccess().getAlternatives(), "rule__Space__Alternatives");
					put(grammarAccess.getDeactivateAccess().getAlternatives_0(), "rule__Deactivate__Alternatives_0");
					put(grammarAccess.getDiagramAccess().getGroup(), "rule__Diagram__Group__0");
					put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
					put(grammarAccess.getInstructionAccess().getGroup_0_1(), "rule__Instruction__Group_0_1__0");
					put(grammarAccess.getArrowAccess().getGroup(), "rule__Arrow__Group__0");
					put(grammarAccess.getArrowAccess().getGroup_3(), "rule__Arrow__Group_3__0");
					put(grammarAccess.getDefinitionAccess().getGroup_0(), "rule__Definition__Group_0__0");
					put(grammarAccess.getDefinitionAccess().getGroup_1(), "rule__Definition__Group_1__0");
					put(grammarAccess.getDefinitionAccess().getGroup_2(), "rule__Definition__Group_2__0");
					put(grammarAccess.getDefinitionAccess().getGroup_3(), "rule__Definition__Group_3__0");
					put(grammarAccess.getDefinitionAccess().getGroup_4(), "rule__Definition__Group_4__0");
					put(grammarAccess.getDefinitionAccess().getGroup_5(), "rule__Definition__Group_5__0");
					put(grammarAccess.getDefinitionAccess().getGroup_5_2(), "rule__Definition__Group_5_2__0");
					put(grammarAccess.getDefinitionAccess().getGroup_5_2_1_0(), "rule__Definition__Group_5_2_1_0__0");
					put(grammarAccess.getDefinitionAccess().getGroup_5_2_1_1(), "rule__Definition__Group_5_2_1_1__0");
					put(grammarAccess.getAutoNumberAccess().getGroup(), "rule__AutoNumber__Group__0");
					put(grammarAccess.getAutoNumberAccess().getGroup_1(), "rule__AutoNumber__Group_1__0");
					put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
					put(grammarAccess.getLegendAccess().getGroup(), "rule__Legend__Group__0");
					put(grammarAccess.getLegendAccess().getGroup_2(), "rule__Legend__Group_2__0");
					put(grammarAccess.getNewpageAccess().getGroup(), "rule__Newpage__Group__0");
					put(grammarAccess.getAltElseAccess().getGroup(), "rule__AltElse__Group__0");
					put(grammarAccess.getElseAccess().getGroup(), "rule__Else__Group__0");
					put(grammarAccess.getGroupingMessagesAccess().getGroup(), "rule__GroupingMessages__Group__0");
					put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
					put(grammarAccess.getNoteAccess().getGroup_1_0(), "rule__Note__Group_1_0__0");
					put(grammarAccess.getNoteAccess().getGroup_1_0_1(), "rule__Note__Group_1_0_1__0");
					put(grammarAccess.getNoteAccess().getGroup_1_0_1_2(), "rule__Note__Group_1_0_1_2__0");
					put(grammarAccess.getNoteAccess().getGroup_1_1(), "rule__Note__Group_1_1__0");
					put(grammarAccess.getNoteAccess().getGroup_1_1_1(), "rule__Note__Group_1_1_1__0");
					put(grammarAccess.getNoteAccess().getGroup_1_1_1_2(), "rule__Note__Group_1_1_1_2__0");
					put(grammarAccess.getNoteAccess().getGroup_1_2(), "rule__Note__Group_1_2__0");
					put(grammarAccess.getNoteAccess().getGroup_1_2_2(), "rule__Note__Group_1_2_2__0");
					put(grammarAccess.getNoteAccess().getGroup_3_0(), "rule__Note__Group_3_0__0");
					put(grammarAccess.getNoteAccess().getGroup_3_1(), "rule__Note__Group_3_1__0");
					put(grammarAccess.getNoteAccess().getGroup_3_1_0(), "rule__Note__Group_3_1_0__0");
					put(grammarAccess.getDividerAccess().getGroup(), "rule__Divider__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup_3(), "rule__Reference__Group_3__0");
					put(grammarAccess.getReferenceAccess().getGroup_4_0(), "rule__Reference__Group_4_0__0");
					put(grammarAccess.getReferenceAccess().getGroup_4_1(), "rule__Reference__Group_4_1__0");
					put(grammarAccess.getReferenceAccess().getGroup_4_1_0(), "rule__Reference__Group_4_1_0__0");
					put(grammarAccess.getDelayAccess().getGroup(), "rule__Delay__Group__0");
					put(grammarAccess.getDelayAccess().getGroup_1(), "rule__Delay__Group_1__0");
					put(grammarAccess.getSpaceAccess().getGroup_1(), "rule__Space__Group_1__0");
					put(grammarAccess.getHidefootboxAccess().getGroup(), "rule__Hidefootbox__Group__0");
					put(grammarAccess.getActivateAccess().getGroup(), "rule__Activate__Group__0");
					put(grammarAccess.getDeactivateAccess().getGroup(), "rule__Deactivate__Group__0");
					put(grammarAccess.getParticipantCreationAccess().getGroup(), "rule__ParticipantCreation__Group__0");
					put(grammarAccess.getBoxAccess().getGroup(), "rule__Box__Group__0");
					put(grammarAccess.getBoxAccess().getGroup_6(), "rule__Box__Group_6__0");
					put(grammarAccess.getPlantumlAccess().getDiagramsAssignment(), "rule__Plantuml__DiagramsAssignment");
					put(grammarAccess.getDiagramAccess().getInstructionsAssignment_3(), "rule__Diagram__InstructionsAssignment_3");
					put(grammarAccess.getArrowAccess().getNameAssignment_0(), "rule__Arrow__NameAssignment_0");
					put(grammarAccess.getArrowAccess().getNameAssignment_2(), "rule__Arrow__NameAssignment_2");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_0_1(), "rule__Definition__NameAssignment_0_1");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_1_1(), "rule__Definition__NameAssignment_1_1");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_2_1(), "rule__Definition__NameAssignment_2_1");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_3_1(), "rule__Definition__NameAssignment_3_1");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_4_1(), "rule__Definition__NameAssignment_4_1");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_5_1(), "rule__Definition__NameAssignment_5_1");
					put(grammarAccess.getAltElseAccess().getInstructionsAssignment_3(), "rule__AltElse__InstructionsAssignment_3");
					put(grammarAccess.getAltElseAccess().getElsesAssignment_4(), "rule__AltElse__ElsesAssignment_4");
					put(grammarAccess.getElseAccess().getInstructionsAssignment_3(), "rule__Else__InstructionsAssignment_3");
					put(grammarAccess.getGroupingMessagesAccess().getInstructionsAssignment_3(), "rule__GroupingMessages__InstructionsAssignment_3");
					put(grammarAccess.getNoteAccess().getRidAssignment_1_0_1_1(), "rule__Note__RidAssignment_1_0_1_1");
					put(grammarAccess.getNoteAccess().getRidsAssignment_1_0_1_2_1(), "rule__Note__RidsAssignment_1_0_1_2_1");
					put(grammarAccess.getNoteAccess().getLidAssignment_1_1_1_1(), "rule__Note__LidAssignment_1_1_1_1");
					put(grammarAccess.getNoteAccess().getLidsAssignment_1_1_1_2_1(), "rule__Note__LidsAssignment_1_1_1_2_1");
					put(grammarAccess.getNoteAccess().getOidAssignment_1_2_1(), "rule__Note__OidAssignment_1_2_1");
					put(grammarAccess.getNoteAccess().getOidsAssignment_1_2_2_1(), "rule__Note__OidsAssignment_1_2_2_1");
					put(grammarAccess.getReferenceAccess().getIdAssignment_2(), "rule__Reference__IdAssignment_2");
					put(grammarAccess.getReferenceAccess().getIdsAssignment_3_1(), "rule__Reference__IdsAssignment_3_1");
					put(grammarAccess.getActivateAccess().getNameAssignment_2(), "rule__Activate__NameAssignment_2");
					put(grammarAccess.getDeactivateAccess().getIdAssignment_1(), "rule__Deactivate__IdAssignment_1");
					put(grammarAccess.getBoxAccess().getDefinitionsAssignment_6_0(), "rule__Box__DefinitionsAssignment_6_0");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ui.contentassist.antlr.internal.InternalPlantumlParser typedParser = (org.xtext.ui.contentassist.antlr.internal.InternalPlantumlParser) parser;
			typedParser.entryRulePlantuml();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT" };
	}
	
	public PlantumlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PlantumlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
