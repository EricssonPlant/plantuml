/*
 * generated by Xtext
 */
package org.xtext.ui.labeling

import com.google.inject.Inject
import org.xtext.plantuml.Arrow
import org.xtext.plantuml.Instruction
import org.xtext.plantuml.Sequence
import org.xtext.plantuml.Diagram
import org.xtext.plantuml.Reference
import org.xtext.plantuml.Declaration
import org.xtext.plantuml.Definition

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class PlantumlLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	@Inject
	new(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
	def text(Diagram diagram){
		"Diagram"
	}
	
	def text(Instruction instr){
		"Instruction"
	}
	
	def text(Sequence sequence){
		"Sequence. Names: " + sequence.getArrowIDs();
	}
	
	def text(Arrow arrow){
		"Arrow. Shape: " + arrow.getLeft() + arrow.getLeftmid()
		+ arrow.getRightmid() + arrow.getRight() + ". Color: " + arrow.getColor();
	}
	
	def text(Reference ref){
		/*var String ret;
		for(i:0 ..< ref.getIds().length()){
			var Declaration dec = ref.getIds().get(i);
			if(dec instanceof Definition){
				var Definition def = dec as Definition;
				ret += "Reference over Defintion ID: " + def.getDeftype().getName() + "\n";
			}
			else if(dec instanceof Sequence){
				var Sequence seq = dec as Sequence;
				ret += "Reference over Sequence ID: " 
			}
		}
		ret*/
		"Reference"
	}
}
