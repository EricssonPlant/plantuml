/*
 * generated by Xtext
 */
package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class PlantumlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PlantumlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plantuml");
		private final Assignment cDiagramsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDiagramsDiagramParserRuleCall_0 = (RuleCall)cDiagramsAssignment.eContents().get(0);
		
		//// Model is a number of @startuml's and @enduml's
		//Plantuml:
		//	diagrams+=Diagram*;
		@Override public ParserRule getRule() { return rule; }

		//diagrams+=Diagram*
		public Assignment getDiagramsAssignment() { return cDiagramsAssignment; }

		//Diagram
		public RuleCall getDiagramsDiagramParserRuleCall_0() { return cDiagramsDiagramParserRuleCall_0; }
	}

	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSTARTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEWLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//// A diagram starts with @Startuml and ends with @enduml, with some number of instructions in between
		//Diagram:
		//	{Diagram} START NEWLINE instructions+=Instruction* END NEWLINE*;
		@Override public ParserRule getRule() { return rule; }

		//{Diagram} START NEWLINE instructions+=Instruction* END NEWLINE*
		public Group getGroup() { return cGroup; }

		//{Diagram}
		public Action getDiagramAction_0() { return cDiagramAction_0; }

		//START
		public RuleCall getSTARTTerminalRuleCall_1() { return cSTARTTerminalRuleCall_1; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }

		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_5() { return cNEWLINETerminalRuleCall_5; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cArrowParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cDefinitionParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final RuleCall cCOLORTerminalRuleCall_0_1_1_0 = (RuleCall)cAlternatives_0_1_1.eContents().get(0);
		private final RuleCall cHEXCODETerminalRuleCall_0_1_1_1 = (RuleCall)cAlternatives_0_1_1.eContents().get(1);
		private final RuleCall cAutoNumberParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cTitleParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cLegendParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cNewpageParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cAltElseParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cGroupingMessagesParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cNoteParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cDividerParserRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cReferenceParserRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cDelayParserRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cSpaceParserRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cHidefootboxParserRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cActivateParserRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cDeactivateParserRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cParticipantCreationParserRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cBoxParserRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// An instruction can be any of the rules for single- and multiline commands.
		//Instruction:
		//	(Arrow | Definition (COLOR | HEXCODE)? | AutoNumber | Title | Legend | Newpage | AltElse | GroupingMessages | Note |
		//	Divider | Reference | Delay | Space | Hidefootbox | Activate | Deactivate | ParticipantCreation | Box)? NEWLINE;
		@Override public ParserRule getRule() { return rule; }

		//(Arrow | Definition (COLOR | HEXCODE)? | AutoNumber | Title | Legend | Newpage | AltElse | GroupingMessages | Note |
		//Divider | Reference | Delay | Space | Hidefootbox | Activate | Deactivate | ParticipantCreation | Box)? NEWLINE
		public Group getGroup() { return cGroup; }

		//(Arrow | Definition (COLOR | HEXCODE)? | AutoNumber | Title | Legend | Newpage | AltElse | GroupingMessages | Note |
		//Divider | Reference | Delay | Space | Hidefootbox | Activate | Deactivate | ParticipantCreation | Box)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Arrow
		public RuleCall getArrowParserRuleCall_0_0() { return cArrowParserRuleCall_0_0; }

		//Definition (COLOR | HEXCODE)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_0_1_0() { return cDefinitionParserRuleCall_0_1_0; }

		//(COLOR | HEXCODE)?
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }

		//COLOR
		public RuleCall getCOLORTerminalRuleCall_0_1_1_0() { return cCOLORTerminalRuleCall_0_1_1_0; }

		//HEXCODE
		public RuleCall getHEXCODETerminalRuleCall_0_1_1_1() { return cHEXCODETerminalRuleCall_0_1_1_1; }

		//AutoNumber
		public RuleCall getAutoNumberParserRuleCall_0_2() { return cAutoNumberParserRuleCall_0_2; }

		//Title
		public RuleCall getTitleParserRuleCall_0_3() { return cTitleParserRuleCall_0_3; }

		//Legend
		public RuleCall getLegendParserRuleCall_0_4() { return cLegendParserRuleCall_0_4; }

		//Newpage
		public RuleCall getNewpageParserRuleCall_0_5() { return cNewpageParserRuleCall_0_5; }

		//AltElse
		public RuleCall getAltElseParserRuleCall_0_6() { return cAltElseParserRuleCall_0_6; }

		//GroupingMessages
		public RuleCall getGroupingMessagesParserRuleCall_0_7() { return cGroupingMessagesParserRuleCall_0_7; }

		//Note
		public RuleCall getNoteParserRuleCall_0_8() { return cNoteParserRuleCall_0_8; }

		//Divider
		public RuleCall getDividerParserRuleCall_0_9() { return cDividerParserRuleCall_0_9; }

		//Reference
		public RuleCall getReferenceParserRuleCall_0_10() { return cReferenceParserRuleCall_0_10; }

		//Delay
		public RuleCall getDelayParserRuleCall_0_11() { return cDelayParserRuleCall_0_11; }

		//Space
		public RuleCall getSpaceParserRuleCall_0_12() { return cSpaceParserRuleCall_0_12; }

		//Hidefootbox
		public RuleCall getHidefootboxParserRuleCall_0_13() { return cHidefootboxParserRuleCall_0_13; }

		//Activate
		public RuleCall getActivateParserRuleCall_0_14() { return cActivateParserRuleCall_0_14; }

		//Deactivate
		public RuleCall getDeactivateParserRuleCall_0_15() { return cDeactivateParserRuleCall_0_15; }

		//ParticipantCreation
		public RuleCall getParticipantCreationParserRuleCall_0_16() { return cParticipantCreationParserRuleCall_0_16; }

		//Box
		public RuleCall getBoxParserRuleCall_0_17() { return cBoxParserRuleCall_0_17; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }
	}

	public class ArrowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arrow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cSEQUENCETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//// Rule for creating sequences between actors (Not necessarily previously defined)
		//Arrow:
		//	name+=ID SEQUENCE name+=ID (":" ID*)?;
		@Override public ParserRule getRule() { return rule; }

		//name+=ID SEQUENCE name+=ID (":" ID*)?
		public Group getGroup() { return cGroup; }

		//name+=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//SEQUENCE
		public RuleCall getSEQUENCETerminalRuleCall_1() { return cSEQUENCETerminalRuleCall_1; }

		//name+=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(":" ID*)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cActorKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBoundaryKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cControlKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cEntityKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cDatabaseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cParticipantKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cLessThanSignLessThanSignKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Alternatives cAlternatives_5_2_1 = (Alternatives)cGroup_5_2.eContents().get(1);
		private final Group cGroup_5_2_1_0 = (Group)cAlternatives_5_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_2_1_0_0 = (Keyword)cGroup_5_2_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_5_2_1_0_1 = (RuleCall)cGroup_5_2_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_5_2_1_0_2 = (Keyword)cGroup_5_2_1_0.eContents().get(2);
		private final RuleCall cCOLORTerminalRuleCall_5_2_1_0_3 = (RuleCall)cGroup_5_2_1_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_5_2_1_0_4 = (Keyword)cGroup_5_2_1_0.eContents().get(4);
		private final Group cGroup_5_2_1_1 = (Group)cAlternatives_5_2_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2_1_1_0 = (Keyword)cGroup_5_2_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_5_2_1_1_1 = (RuleCall)cGroup_5_2_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_2_1_1_2 = (Keyword)cGroup_5_2_1_1.eContents().get(2);
		private final RuleCall cCOLORTerminalRuleCall_5_2_1_1_3 = (RuleCall)cGroup_5_2_1_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_5_2_1_1_4 = (Keyword)cGroup_5_2_1_1.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_5_2_1_1_5 = (RuleCall)cGroup_5_2_1_1.eContents().get(5);
		private final RuleCall cIDTerminalRuleCall_5_2_1_2 = (RuleCall)cAlternatives_5_2_1.eContents().get(2);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_5_2_2 = (Keyword)cGroup_5_2.eContents().get(2);
		
		//// Rule for defining objects in PlantUML, such as
		//// actors, boundaries, controls, entities and databases
		//Definition:
		//	"actor" name=ID // Change second ID in participant to Single-Line String.
		//	| "boundary" name=ID | "control" name=ID | "entity" name=ID | "database" name=ID | "participant" name=ID ("<<" ("(" ID
		//	"," COLOR ")" | "(" ID "," COLOR ")" ID | ID) ">>")?;
		@Override public ParserRule getRule() { return rule; }

		//"actor" name=ID // Change second ID in participant to Single-Line String.
		//| "boundary" name=ID | "control" name=ID | "entity" name=ID | "database" name=ID | "participant" name=ID ("<<" ("(" ID
		//"," COLOR ")" | "(" ID "," COLOR ")" ID | ID) ">>")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"actor" name=ID
		public Group getGroup_0() { return cGroup_0; }

		//"actor"
		public Keyword getActorKeyword_0_0() { return cActorKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//"boundary" name=ID
		public Group getGroup_1() { return cGroup_1; }

		//"boundary"
		public Keyword getBoundaryKeyword_1_0() { return cBoundaryKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//"control" name=ID
		public Group getGroup_2() { return cGroup_2; }

		//"control"
		public Keyword getControlKeyword_2_0() { return cControlKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//"entity" name=ID
		public Group getGroup_3() { return cGroup_3; }

		//"entity"
		public Keyword getEntityKeyword_3_0() { return cEntityKeyword_3_0; }

		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }

		//"database" name=ID
		public Group getGroup_4() { return cGroup_4; }

		//"database"
		public Keyword getDatabaseKeyword_4_0() { return cDatabaseKeyword_4_0; }

		//name=ID
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_1_0() { return cNameIDTerminalRuleCall_4_1_0; }

		//"participant" name=ID ("<<" ("(" ID "," COLOR ")" | "(" ID "," COLOR ")" ID | ID) ">>")?
		public Group getGroup_5() { return cGroup_5; }

		//"participant"
		public Keyword getParticipantKeyword_5_0() { return cParticipantKeyword_5_0; }

		//name=ID
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_1_0() { return cNameIDTerminalRuleCall_5_1_0; }

		//("<<" ("(" ID "," COLOR ")" | "(" ID "," COLOR ")" ID | ID) ">>")?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_5_2_0() { return cLessThanSignLessThanSignKeyword_5_2_0; }

		//"(" ID "," COLOR ")" | "(" ID "," COLOR ")" ID | ID
		public Alternatives getAlternatives_5_2_1() { return cAlternatives_5_2_1; }

		//"(" ID "," COLOR ")"
		public Group getGroup_5_2_1_0() { return cGroup_5_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2_1_0_0() { return cLeftParenthesisKeyword_5_2_1_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_5_2_1_0_1() { return cIDTerminalRuleCall_5_2_1_0_1; }

		//","
		public Keyword getCommaKeyword_5_2_1_0_2() { return cCommaKeyword_5_2_1_0_2; }

		//COLOR
		public RuleCall getCOLORTerminalRuleCall_5_2_1_0_3() { return cCOLORTerminalRuleCall_5_2_1_0_3; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2_1_0_4() { return cRightParenthesisKeyword_5_2_1_0_4; }

		//"(" ID "," COLOR ")" ID
		public Group getGroup_5_2_1_1() { return cGroup_5_2_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2_1_1_0() { return cLeftParenthesisKeyword_5_2_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_5_2_1_1_1() { return cIDTerminalRuleCall_5_2_1_1_1; }

		//","
		public Keyword getCommaKeyword_5_2_1_1_2() { return cCommaKeyword_5_2_1_1_2; }

		//COLOR
		public RuleCall getCOLORTerminalRuleCall_5_2_1_1_3() { return cCOLORTerminalRuleCall_5_2_1_1_3; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2_1_1_4() { return cRightParenthesisKeyword_5_2_1_1_4; }

		//ID
		public RuleCall getIDTerminalRuleCall_5_2_1_1_5() { return cIDTerminalRuleCall_5_2_1_1_5; }

		//ID
		public RuleCall getIDTerminalRuleCall_5_2_1_2() { return cIDTerminalRuleCall_5_2_1_2; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_5_2_2() { return cGreaterThanSignGreaterThanSignKeyword_5_2_2; }
	}

	public class AutoNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AutoNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutonumberKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// Rule for the autonumbering function. Can be followed by one or two numbers, separated by spaces
		//AutoNumber:
		//	"autonumber" (INT INT?)?;
		@Override public ParserRule getRule() { return rule; }

		//"autonumber" (INT INT?)?
		public Group getGroup() { return cGroup; }

		//"autonumber"
		public Keyword getAutonumberKeyword_0() { return cAutonumberKeyword_0; }

		//(INT INT?)?
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// Rule for the title of the diagram
		//Title:
		//	"title" ID*;
		@Override public ParserRule getRule() { return rule; }

		//"title" ID*
		public Group getGroup() { return cGroup; }

		//"title"
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class LegendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Legend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLegendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cCenterKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cEndlegendKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Rule for legends.
		//Legend:
		//	"legend" ("right" | "left" | "center")? (NEWLINE ID*)* "endlegend";
		@Override public ParserRule getRule() { return rule; }

		//"legend" ("right" | "left" | "center")? (NEWLINE ID*)* "endlegend"
		public Group getGroup() { return cGroup; }

		//"legend"
		public Keyword getLegendKeyword_0() { return cLegendKeyword_0; }

		//("right" | "left" | "center")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"right"
		public Keyword getRightKeyword_1_0() { return cRightKeyword_1_0; }

		//"left"
		public Keyword getLeftKeyword_1_1() { return cLeftKeyword_1_1; }

		//"center"
		public Keyword getCenterKeyword_1_2() { return cCenterKeyword_1_2; }

		//(NEWLINE ID*)*
		public Group getGroup_2() { return cGroup_2; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2_0() { return cNEWLINETerminalRuleCall_2_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }

		//"endlegend"
		public Keyword getEndlegendKeyword_3() { return cEndlegendKeyword_3; }
	}

	public class NewpageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Newpage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewpageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// Rule for newpages
		//Newpage:
		//	"newpage" ID*;
		@Override public ParserRule getRule() { return rule; }

		//"newpage" ID*
		public Group getGroup() { return cGroup; }

		//"newpage"
		public Keyword getNewpageKeyword_0() { return cNewpageKeyword_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class AltElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AltElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Assignment cElsesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElsesElseParserRuleCall_4_0 = (RuleCall)cElsesAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Rules for Alt-Else clauses.
		//AltElse:
		//	"alt" ID* NEWLINE instructions+=Instruction* elses+=Else* //NEWLINE 'end'
		//	"end";
		@Override public ParserRule getRule() { return rule; }

		//"alt" ID* NEWLINE instructions+=Instruction* elses+=Else* //NEWLINE 'end'
		//"end"
		public Group getGroup() { return cGroup; }

		//"alt"
		public Keyword getAltKeyword_0() { return cAltKeyword_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }

		//elses+=Else*
		public Assignment getElsesAssignment_4() { return cElsesAssignment_4; }

		//Else
		public RuleCall getElsesElseParserRuleCall_4_0() { return cElsesElseParserRuleCall_4_0; }

		////NEWLINE 'end'
		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}

	public class ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Else");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		
		//Else:
		//	"else" ID* NEWLINE instructions+=Instruction*;
		@Override public ParserRule getRule() { return rule; }

		//"else" ID* NEWLINE instructions+=Instruction*
		public Group getGroup() { return cGroup; }

		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }
	}

	public class GroupingMessagesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupingMessages");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cOptKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLoopKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cParKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cBreakKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cCriticalKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cGroupKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Rule for "grouping-messages"
		//GroupingMessages:
		//	("opt" | "loop" | "par" | "break" | "critical" | "group") ID* NEWLINE instructions+=Instruction* "end";
		@Override public ParserRule getRule() { return rule; }

		//("opt" | "loop" | "par" | "break" | "critical" | "group") ID* NEWLINE instructions+=Instruction* "end"
		public Group getGroup() { return cGroup; }

		//"opt" | "loop" | "par" | "break" | "critical" | "group"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"opt"
		public Keyword getOptKeyword_0_0() { return cOptKeyword_0_0; }

		//"loop"
		public Keyword getLoopKeyword_0_1() { return cLoopKeyword_0_1; }

		//"par"
		public Keyword getParKeyword_0_2() { return cParKeyword_0_2; }

		//"break"
		public Keyword getBreakKeyword_0_3() { return cBreakKeyword_0_3; }

		//"critical"
		public Keyword getCriticalKeyword_0_4() { return cCriticalKeyword_0_4; }

		//"group"
		public Keyword getGroupKeyword_0_5() { return cGroupKeyword_0_5; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRightKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cOfKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cRidAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final CrossReference cRidDefinitionCrossReference_1_0_1_1_0 = (CrossReference)cRidAssignment_1_0_1_1.eContents().get(0);
		private final RuleCall cRidDefinitionIDTerminalRuleCall_1_0_1_1_0_1 = (RuleCall)cRidDefinitionCrossReference_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_0_1_2 = (Group)cGroup_1_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_1_2_0 = (Keyword)cGroup_1_0_1_2.eContents().get(0);
		private final Assignment cRidsAssignment_1_0_1_2_1 = (Assignment)cGroup_1_0_1_2.eContents().get(1);
		private final CrossReference cRidsDefinitionCrossReference_1_0_1_2_1_0 = (CrossReference)cRidsAssignment_1_0_1_2_1.eContents().get(0);
		private final RuleCall cRidsDefinitionIDTerminalRuleCall_1_0_1_2_1_0_1 = (RuleCall)cRidsDefinitionCrossReference_1_0_1_2_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cOfKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cLidAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final CrossReference cLidDefinitionCrossReference_1_1_1_1_0 = (CrossReference)cLidAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cLidDefinitionIDTerminalRuleCall_1_1_1_1_0_1 = (RuleCall)cLidDefinitionCrossReference_1_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cLidsAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final CrossReference cLidsDefinitionCrossReference_1_1_1_2_1_0 = (CrossReference)cLidsAssignment_1_1_1_2_1.eContents().get(0);
		private final RuleCall cLidsDefinitionIDTerminalRuleCall_1_1_1_2_1_0_1 = (RuleCall)cLidsDefinitionCrossReference_1_1_1_2_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cOverKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cOidAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cOidDefinitionCrossReference_1_2_1_0 = (CrossReference)cOidAssignment_1_2_1.eContents().get(0);
		private final RuleCall cOidDefinitionIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cOidDefinitionCrossReference_1_2_1_0.eContents().get(1);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cOidsAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final CrossReference cOidsDefinitionCrossReference_1_2_2_1_0 = (CrossReference)cOidsAssignment_1_2_2_1.eContents().get(0);
		private final RuleCall cOidsDefinitionIDTerminalRuleCall_1_2_2_1_0_1 = (RuleCall)cOidsDefinitionCrossReference_1_2_2_1_0.eContents().get(1);
		private final RuleCall cCOLORTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_0_1 = (RuleCall)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_3_1_0_0 = (RuleCall)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1_0_1 = (RuleCall)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Keyword cEndKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Keyword cNoteKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		
		//// Rule for notes
		//Note:
		//	"note" ("right" ("of" rid=[Definition] ("," rids+=[Definition])*)? | "left" ("of" lid=[Definition] (","
		//	lids+=[Definition])*)? | "over" oid=[Definition] ("," oids+=[Definition])*) COLOR* (":" ID | (NEWLINE ID*)* NEWLINE
		//	"end" "note");
		@Override public ParserRule getRule() { return rule; }

		//"note" ("right" ("of" rid=[Definition] ("," rids+=[Definition])*)? | "left" ("of" lid=[Definition] (","
		//lids+=[Definition])*)? | "over" oid=[Definition] ("," oids+=[Definition])*) COLOR* (":" ID | (NEWLINE ID*)* NEWLINE
		//"end" "note")
		public Group getGroup() { return cGroup; }

		//"note"
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }

		//"right" ("of" rid=[Definition] ("," rids+=[Definition])*)? | "left" ("of" lid=[Definition] ("," lids+=[Definition])*)? |
		//"over" oid=[Definition] ("," oids+=[Definition])*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"right" ("of" rid=[Definition] ("," rids+=[Definition])*)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"right"
		public Keyword getRightKeyword_1_0_0() { return cRightKeyword_1_0_0; }

		//("of" rid=[Definition] ("," rids+=[Definition])*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"of"
		public Keyword getOfKeyword_1_0_1_0() { return cOfKeyword_1_0_1_0; }

		//rid=[Definition]
		public Assignment getRidAssignment_1_0_1_1() { return cRidAssignment_1_0_1_1; }

		//[Definition]
		public CrossReference getRidDefinitionCrossReference_1_0_1_1_0() { return cRidDefinitionCrossReference_1_0_1_1_0; }

		//ID
		public RuleCall getRidDefinitionIDTerminalRuleCall_1_0_1_1_0_1() { return cRidDefinitionIDTerminalRuleCall_1_0_1_1_0_1; }

		//("," rids+=[Definition])*
		public Group getGroup_1_0_1_2() { return cGroup_1_0_1_2; }

		//","
		public Keyword getCommaKeyword_1_0_1_2_0() { return cCommaKeyword_1_0_1_2_0; }

		//rids+=[Definition]
		public Assignment getRidsAssignment_1_0_1_2_1() { return cRidsAssignment_1_0_1_2_1; }

		//[Definition]
		public CrossReference getRidsDefinitionCrossReference_1_0_1_2_1_0() { return cRidsDefinitionCrossReference_1_0_1_2_1_0; }

		//ID
		public RuleCall getRidsDefinitionIDTerminalRuleCall_1_0_1_2_1_0_1() { return cRidsDefinitionIDTerminalRuleCall_1_0_1_2_1_0_1; }

		//"left" ("of" lid=[Definition] ("," lids+=[Definition])*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"left"
		public Keyword getLeftKeyword_1_1_0() { return cLeftKeyword_1_1_0; }

		//("of" lid=[Definition] ("," lids+=[Definition])*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"of"
		public Keyword getOfKeyword_1_1_1_0() { return cOfKeyword_1_1_1_0; }

		//lid=[Definition]
		public Assignment getLidAssignment_1_1_1_1() { return cLidAssignment_1_1_1_1; }

		//[Definition]
		public CrossReference getLidDefinitionCrossReference_1_1_1_1_0() { return cLidDefinitionCrossReference_1_1_1_1_0; }

		//ID
		public RuleCall getLidDefinitionIDTerminalRuleCall_1_1_1_1_0_1() { return cLidDefinitionIDTerminalRuleCall_1_1_1_1_0_1; }

		//("," lids+=[Definition])*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }

		//lids+=[Definition]
		public Assignment getLidsAssignment_1_1_1_2_1() { return cLidsAssignment_1_1_1_2_1; }

		//[Definition]
		public CrossReference getLidsDefinitionCrossReference_1_1_1_2_1_0() { return cLidsDefinitionCrossReference_1_1_1_2_1_0; }

		//ID
		public RuleCall getLidsDefinitionIDTerminalRuleCall_1_1_1_2_1_0_1() { return cLidsDefinitionIDTerminalRuleCall_1_1_1_2_1_0_1; }

		//"over" oid=[Definition] ("," oids+=[Definition])*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"over"
		public Keyword getOverKeyword_1_2_0() { return cOverKeyword_1_2_0; }

		//oid=[Definition]
		public Assignment getOidAssignment_1_2_1() { return cOidAssignment_1_2_1; }

		//[Definition]
		public CrossReference getOidDefinitionCrossReference_1_2_1_0() { return cOidDefinitionCrossReference_1_2_1_0; }

		//ID
		public RuleCall getOidDefinitionIDTerminalRuleCall_1_2_1_0_1() { return cOidDefinitionIDTerminalRuleCall_1_2_1_0_1; }

		//("," oids+=[Definition])*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//","
		public Keyword getCommaKeyword_1_2_2_0() { return cCommaKeyword_1_2_2_0; }

		//oids+=[Definition]
		public Assignment getOidsAssignment_1_2_2_1() { return cOidsAssignment_1_2_2_1; }

		//[Definition]
		public CrossReference getOidsDefinitionCrossReference_1_2_2_1_0() { return cOidsDefinitionCrossReference_1_2_2_1_0; }

		//ID
		public RuleCall getOidsDefinitionIDTerminalRuleCall_1_2_2_1_0_1() { return cOidsDefinitionIDTerminalRuleCall_1_2_2_1_0_1; }

		//COLOR*
		public RuleCall getCOLORTerminalRuleCall_2() { return cCOLORTerminalRuleCall_2; }

		//":" ID | (NEWLINE ID*)* NEWLINE "end" "note"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//":" ID
		public Group getGroup_3_0() { return cGroup_3_0; }

		//":"
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_0_1() { return cIDTerminalRuleCall_3_0_1; }

		//(NEWLINE ID*)* NEWLINE "end" "note"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//(NEWLINE ID*)*
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_3_1_0_0() { return cNEWLINETerminalRuleCall_3_1_0_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_3_1_0_1() { return cIDTerminalRuleCall_3_1_0_1; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_3_1_1() { return cNEWLINETerminalRuleCall_3_1_1; }

		//"end"
		public Keyword getEndKeyword_3_1_2() { return cEndKeyword_3_1_2; }

		//"note"
		public Keyword getNoteKeyword_3_1_3() { return cNoteKeyword_3_1_3; }
	}

	public class DividerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Divider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Rule for Dividers.
		//Divider:
		//	"==" ID* "==";
		@Override public ParserRule getRule() { return rule; }

		//"==" ID* "=="
		public Group getGroup() { return cGroup; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOverKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cIdDefinitionCrossReference_2_0 = (CrossReference)cIdAssignment_2.eContents().get(0);
		private final RuleCall cIdDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cIdDefinitionCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cIdsDefinitionCrossReference_3_1_0 = (CrossReference)cIdsAssignment_3_1.eContents().get(0);
		private final RuleCall cIdsDefinitionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cIdsDefinitionCrossReference_3_1_0.eContents().get(1);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cColonKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_0_1 = (RuleCall)cGroup_4_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cGroup_4_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4_1_0_0 = (RuleCall)cGroup_4_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1_0_1 = (RuleCall)cGroup_4_1_0.eContents().get(1);
		private final Keyword cEndKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Keyword cRefKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		
		//// Rule for References
		//Reference:
		//	"ref" "over" id=[Definition] ("," ids+=[Definition])* (":" ID* | (NEWLINE ID*)* "end" "ref");
		@Override public ParserRule getRule() { return rule; }

		//"ref" "over" id=[Definition] ("," ids+=[Definition])* (":" ID* | (NEWLINE ID*)* "end" "ref")
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//"over"
		public Keyword getOverKeyword_1() { return cOverKeyword_1; }

		//id=[Definition]
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//[Definition]
		public CrossReference getIdDefinitionCrossReference_2_0() { return cIdDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getIdDefinitionIDTerminalRuleCall_2_0_1() { return cIdDefinitionIDTerminalRuleCall_2_0_1; }

		//("," ids+=[Definition])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ids+=[Definition]
		public Assignment getIdsAssignment_3_1() { return cIdsAssignment_3_1; }

		//[Definition]
		public CrossReference getIdsDefinitionCrossReference_3_1_0() { return cIdsDefinitionCrossReference_3_1_0; }

		//ID
		public RuleCall getIdsDefinitionIDTerminalRuleCall_3_1_0_1() { return cIdsDefinitionIDTerminalRuleCall_3_1_0_1; }

		//":" ID* | (NEWLINE ID*)* "end" "ref"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//":" ID*
		public Group getGroup_4_0() { return cGroup_4_0; }

		//":"
		public Keyword getColonKeyword_4_0_0() { return cColonKeyword_4_0_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_4_0_1() { return cIDTerminalRuleCall_4_0_1; }

		//(NEWLINE ID*)* "end" "ref"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//(NEWLINE ID*)*
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4_1_0_0() { return cNEWLINETerminalRuleCall_4_1_0_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_4_1_0_1() { return cIDTerminalRuleCall_4_1_0_1; }

		//"end"
		public Keyword getEndKeyword_4_1_1() { return cEndKeyword_4_1_1; }

		//"ref"
		public Keyword getRefKeyword_4_1_2() { return cRefKeyword_4_1_2; }
	}

	public class DelayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//// Rule for delays
		//Delay:
		//	"..." (ID* "...")?;
		@Override public ParserRule getRule() { return rule; }

		//"..." (ID* "...")?
		public Group getGroup() { return cGroup; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_0() { return cFullStopFullStopFullStopKeyword_0; }

		//(ID* "...")?
		public Group getGroup_1() { return cGroup_1; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }
	}

	public class SpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Space");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineVerticalLineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// Rule for Spaces
		//// TODO: Make it possible to "see" the hidden whitespaces.
		//Space:
		//	"|||" | "||" INT "||";
		@Override public ParserRule getRule() { return rule; }

		//"|||" | "||" INT "||"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"|||"
		public Keyword getVerticalLineVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineVerticalLineKeyword_0; }

		//"||" INT "||"
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_2() { return cVerticalLineVerticalLineKeyword_1_2; }
	}

	public class HidefootboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hidefootbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFootboxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// Rule for hiding the footbox
		//Hidefootbox:
		//	"hide" "footbox";
		@Override public ParserRule getRule() { return rule; }

		//"hide" "footbox"
		public Group getGroup() { return cGroup; }

		//"hide"
		public Keyword getHideKeyword_0() { return cHideKeyword_0; }

		//"footbox"
		public Keyword getFootboxKeyword_1() { return cFootboxKeyword_1; }
	}

	public class ActivateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Activate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCOLORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// Rules for activation, deactivation and destruction of lifelines
		//Activate:
		//	"activate" COLOR? name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"activate" COLOR? name=ID
		public Group getGroup() { return cGroup; }

		//"activate"
		public Keyword getActivateKeyword_0() { return cActivateKeyword_0; }

		//COLOR?
		public RuleCall getCOLORTerminalRuleCall_1() { return cCOLORTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class DeactivateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Deactivate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDeactivateKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDestroyKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cIdActivateCrossReference_1_0 = (CrossReference)cIdAssignment_1.eContents().get(0);
		private final RuleCall cIdActivateIDTerminalRuleCall_1_0_1 = (RuleCall)cIdActivateCrossReference_1_0.eContents().get(1);
		
		//Deactivate:
		//	("deactivate" | "destroy") id=[Activate];
		@Override public ParserRule getRule() { return rule; }

		//("deactivate" | "destroy") id=[Activate]
		public Group getGroup() { return cGroup; }

		//"deactivate" | "destroy"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"deactivate"
		public Keyword getDeactivateKeyword_0_0() { return cDeactivateKeyword_0_0; }

		//"destroy"
		public Keyword getDestroyKeyword_0_1() { return cDestroyKeyword_0_1; }

		//id=[Activate]
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//[Activate]
		public CrossReference getIdActivateCrossReference_1_0() { return cIdActivateCrossReference_1_0; }

		//ID
		public RuleCall getIdActivateIDTerminalRuleCall_1_0_1() { return cIdActivateIDTerminalRuleCall_1_0_1; }
	}

	public class ParticipantCreationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParticipantCreation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// Rule for Participant Creation
		//// TODO: Make sure the ID hasn't been created in beforehand.
		//ParticipantCreation:
		//	"create" ID;
		@Override public ParserRule getRule() { return rule; }

		//"create" ID
		public Group getGroup() { return cGroup; }

		//"create"
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cCOLORTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cNEWLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cDefinitionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cDefinitionsDefinitionParserRuleCall_6_0_0 = (RuleCall)cDefinitionsAssignment_6_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cBoxKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// Rule for box/end box
		//Box:
		//	"box" "\"" ID* "\"" COLOR? NEWLINE (definitions+=Definition? NEWLINE)* "end" "box";
		@Override public ParserRule getRule() { return rule; }

		//"box" "\"" ID* "\"" COLOR? NEWLINE (definitions+=Definition? NEWLINE)* "end" "box"
		public Group getGroup() { return cGroup; }

		//"box"
		public Keyword getBoxKeyword_0() { return cBoxKeyword_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_1() { return cQuotationMarkKeyword_1; }

		//ID*
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }

		//"\""
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }

		//COLOR?
		public RuleCall getCOLORTerminalRuleCall_4() { return cCOLORTerminalRuleCall_4; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_5() { return cNEWLINETerminalRuleCall_5; }

		//(definitions+=Definition? NEWLINE)*
		public Group getGroup_6() { return cGroup_6; }

		//definitions+=Definition?
		public Assignment getDefinitionsAssignment_6_0() { return cDefinitionsAssignment_6_0; }

		//Definition
		public RuleCall getDefinitionsDefinitionParserRuleCall_6_0_0() { return cDefinitionsDefinitionParserRuleCall_6_0_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6_1() { return cNEWLINETerminalRuleCall_6_1; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }

		//"box"
		public Keyword getBoxKeyword_8() { return cBoxKeyword_8; }
	}
	
	
	private final PlantumlElements pPlantuml;
	private final DiagramElements pDiagram;
	private final InstructionElements pInstruction;
	private final ArrowElements pArrow;
	private final DefinitionElements pDefinition;
	private final AutoNumberElements pAutoNumber;
	private final TitleElements pTitle;
	private final LegendElements pLegend;
	private final NewpageElements pNewpage;
	private final AltElseElements pAltElse;
	private final ElseElements pElse;
	private final GroupingMessagesElements pGroupingMessages;
	private final NoteElements pNote;
	private final DividerElements pDivider;
	private final ReferenceElements pReference;
	private final DelayElements pDelay;
	private final SpaceElements pSpace;
	private final HidefootboxElements pHidefootbox;
	private final ActivateElements pActivate;
	private final DeactivateElements pDeactivate;
	private final ParticipantCreationElements pParticipantCreation;
	private final BoxElements pBox;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tSTART;
	private final TerminalRule tEND;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSEQUENCE;
	private final TerminalRule tCOLOR;
	private final TerminalRule tHEXCODE;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public PlantumlGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pPlantuml = new PlantumlElements();
		this.pDiagram = new DiagramElements();
		this.pInstruction = new InstructionElements();
		this.pArrow = new ArrowElements();
		this.pDefinition = new DefinitionElements();
		this.pAutoNumber = new AutoNumberElements();
		this.pTitle = new TitleElements();
		this.pLegend = new LegendElements();
		this.pNewpage = new NewpageElements();
		this.pAltElse = new AltElseElements();
		this.pElse = new ElseElements();
		this.pGroupingMessages = new GroupingMessagesElements();
		this.pNote = new NoteElements();
		this.pDivider = new DividerElements();
		this.pReference = new ReferenceElements();
		this.pDelay = new DelayElements();
		this.pSpace = new SpaceElements();
		this.pHidefootbox = new HidefootboxElements();
		this.pActivate = new ActivateElements();
		this.pDeactivate = new DeactivateElements();
		this.pParticipantCreation = new ParticipantCreationElements();
		this.pBox = new BoxElements();
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE");
		this.tSTART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "START");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tSEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEQUENCE");
		this.tCOLOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLOR");
		this.tHEXCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXCODE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Plantuml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// Model is a number of @startuml's and @enduml's
	//Plantuml:
	//	diagrams+=Diagram*;
	public PlantumlElements getPlantumlAccess() {
		return pPlantuml;
	}
	
	public ParserRule getPlantumlRule() {
		return getPlantumlAccess().getRule();
	}

	//// A diagram starts with @Startuml and ends with @enduml, with some number of instructions in between
	//Diagram:
	//	{Diagram} START NEWLINE instructions+=Instruction* END NEWLINE*;
	public DiagramElements getDiagramAccess() {
		return pDiagram;
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}

	//// An instruction can be any of the rules for single- and multiline commands.
	//Instruction:
	//	(Arrow | Definition (COLOR | HEXCODE)? | AutoNumber | Title | Legend | Newpage | AltElse | GroupingMessages | Note |
	//	Divider | Reference | Delay | Space | Hidefootbox | Activate | Deactivate | ParticipantCreation | Box)? NEWLINE;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//// Rule for creating sequences between actors (Not necessarily previously defined)
	//Arrow:
	//	name+=ID SEQUENCE name+=ID (":" ID*)?;
	public ArrowElements getArrowAccess() {
		return pArrow;
	}
	
	public ParserRule getArrowRule() {
		return getArrowAccess().getRule();
	}

	//// Rule for defining objects in PlantUML, such as
	//// actors, boundaries, controls, entities and databases
	//Definition:
	//	"actor" name=ID // Change second ID in participant to Single-Line String.
	//	| "boundary" name=ID | "control" name=ID | "entity" name=ID | "database" name=ID | "participant" name=ID ("<<" ("(" ID
	//	"," COLOR ")" | "(" ID "," COLOR ")" ID | ID) ">>")?;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//// Rule for the autonumbering function. Can be followed by one or two numbers, separated by spaces
	//AutoNumber:
	//	"autonumber" (INT INT?)?;
	public AutoNumberElements getAutoNumberAccess() {
		return pAutoNumber;
	}
	
	public ParserRule getAutoNumberRule() {
		return getAutoNumberAccess().getRule();
	}

	//// Rule for the title of the diagram
	//Title:
	//	"title" ID*;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}

	//// Rule for legends.
	//Legend:
	//	"legend" ("right" | "left" | "center")? (NEWLINE ID*)* "endlegend";
	public LegendElements getLegendAccess() {
		return pLegend;
	}
	
	public ParserRule getLegendRule() {
		return getLegendAccess().getRule();
	}

	//// Rule for newpages
	//Newpage:
	//	"newpage" ID*;
	public NewpageElements getNewpageAccess() {
		return pNewpage;
	}
	
	public ParserRule getNewpageRule() {
		return getNewpageAccess().getRule();
	}

	//// Rules for Alt-Else clauses.
	//AltElse:
	//	"alt" ID* NEWLINE instructions+=Instruction* elses+=Else* //NEWLINE 'end'
	//	"end";
	public AltElseElements getAltElseAccess() {
		return pAltElse;
	}
	
	public ParserRule getAltElseRule() {
		return getAltElseAccess().getRule();
	}

	//Else:
	//	"else" ID* NEWLINE instructions+=Instruction*;
	public ElseElements getElseAccess() {
		return pElse;
	}
	
	public ParserRule getElseRule() {
		return getElseAccess().getRule();
	}

	//// Rule for "grouping-messages"
	//GroupingMessages:
	//	("opt" | "loop" | "par" | "break" | "critical" | "group") ID* NEWLINE instructions+=Instruction* "end";
	public GroupingMessagesElements getGroupingMessagesAccess() {
		return pGroupingMessages;
	}
	
	public ParserRule getGroupingMessagesRule() {
		return getGroupingMessagesAccess().getRule();
	}

	//// Rule for notes
	//Note:
	//	"note" ("right" ("of" rid=[Definition] ("," rids+=[Definition])*)? | "left" ("of" lid=[Definition] (","
	//	lids+=[Definition])*)? | "over" oid=[Definition] ("," oids+=[Definition])*) COLOR* (":" ID | (NEWLINE ID*)* NEWLINE
	//	"end" "note");
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}

	//// Rule for Dividers.
	//Divider:
	//	"==" ID* "==";
	public DividerElements getDividerAccess() {
		return pDivider;
	}
	
	public ParserRule getDividerRule() {
		return getDividerAccess().getRule();
	}

	//// Rule for References
	//Reference:
	//	"ref" "over" id=[Definition] ("," ids+=[Definition])* (":" ID* | (NEWLINE ID*)* "end" "ref");
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//// Rule for delays
	//Delay:
	//	"..." (ID* "...")?;
	public DelayElements getDelayAccess() {
		return pDelay;
	}
	
	public ParserRule getDelayRule() {
		return getDelayAccess().getRule();
	}

	//// Rule for Spaces
	//// TODO: Make it possible to "see" the hidden whitespaces.
	//Space:
	//	"|||" | "||" INT "||";
	public SpaceElements getSpaceAccess() {
		return pSpace;
	}
	
	public ParserRule getSpaceRule() {
		return getSpaceAccess().getRule();
	}

	//// Rule for hiding the footbox
	//Hidefootbox:
	//	"hide" "footbox";
	public HidefootboxElements getHidefootboxAccess() {
		return pHidefootbox;
	}
	
	public ParserRule getHidefootboxRule() {
		return getHidefootboxAccess().getRule();
	}

	//// Rules for activation, deactivation and destruction of lifelines
	//Activate:
	//	"activate" COLOR? name=ID;
	public ActivateElements getActivateAccess() {
		return pActivate;
	}
	
	public ParserRule getActivateRule() {
		return getActivateAccess().getRule();
	}

	//Deactivate:
	//	("deactivate" | "destroy") id=[Activate];
	public DeactivateElements getDeactivateAccess() {
		return pDeactivate;
	}
	
	public ParserRule getDeactivateRule() {
		return getDeactivateAccess().getRule();
	}

	//// Rule for Participant Creation
	//// TODO: Make sure the ID hasn't been created in beforehand.
	//ParticipantCreation:
	//	"create" ID;
	public ParticipantCreationElements getParticipantCreationAccess() {
		return pParticipantCreation;
	}
	
	public ParserRule getParticipantCreationRule() {
		return getParticipantCreationAccess().getRule();
	}

	//// Rule for box/end box
	//Box:
	//	"box" "\"" ID* "\"" COLOR? NEWLINE (definitions+=Definition? NEWLINE)* "end" "box";
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}

	//// Terminals
	////--------------------------------------------------
	//terminal NEWLINE:
	//	"\r"? "\n";
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	} 

	//terminal START:
	//	"@" "startuml";
	public TerminalRule getSTARTRule() {
		return tSTART;
	} 

	//terminal END:
	//	"@" "enduml";
	public TerminalRule getENDRule() {
		return tEND;
	} 

	//// INT is a sequence of numbers 0-9.
	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//// ID can be any following sequence of letters and numbers, without spaces between them.
	////Before: '^'?('a'..'z'|'A'..'Z'|'_' | 'å' | 'ä' | 'ö') ('a'..'z'|'A'..'Z'|'_'|'0'..'9' | 'å' | 'ä' | 'ö')*;
	//terminal ID:
	//	("a".."z" | "A".."Z" | "0".."9" | "å" | "ä" | "ö")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//// Multiline comment begins with /', and ends with '/
	//terminal ML_COMMENT:
	//	"/\'"->"\'/";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//// Singleline comment begins with ', and continues until end of line.
	//terminal SL_COMMENT:
	//	"\'" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//// Sequences are arrows connecting two actors. Has to be defined in unicode.
	//terminal SEQUENCE:
	//	"-"* "-" // - = u002D  | > = u003E
	//	">" | "<" "-" "-"* // < = u003C  | - = u002D
	//	| "-" ">" // - = u002D  | > = u003E
	//	"x" | "x" "<" // < = u003C | - = u002D
	//	"-" | "-"* "-" ">" // - = u002D | > = u003E
	//	">" | "<" "<" "-" "-"* // < = u003C | - = u002D
	//	| "-"* "-" "\\" // - = u002D
	//	"\\" | "/" "-" "-"* // / = u002F | - = u002D
	//	| "/" "/" "-" "-"* // / = u002F | - = u002D
	//	| "-"* "-" ">" // - = u002D | > = u003E
	//	"o" | "o" "<" "-" "-"* // < = u003C | - = u002D
	//	| "-"* "-" "-" "/" "/" // - = u002D | / = u002F
	//	"o" | "o" "\\\\" "-" "-" "-"* // - = u002D
	//	| "<" "-" // < = u003C | - = u002D | > = u003E
	//	">" | "<" "-" ">" // < = u003C | - = u002D | > = u003E
	//	"o" | "o" "<" "-" // < = u003C | - = u002D | > = u003E
	//	">" | "<" "|" "-" // < = u003C | | = u007C | - = u002D
	//	"-" | "-" "-" "|" // - = u002D | | = u007C | > = u003E
	//	">" | "." // . = u002E
	//	"." | // . = u002E	
	//	".";
	public TerminalRule getSEQUENCERule() {
		return tSEQUENCE;
	} 

	//terminal COLOR:
	//	"#" ("AliceBlue" | "AntiqueWhite" | "Aqua" | "Aquamarine" | "Azure" | "Beige" | "Bisque" | "Black" | "BlanchedAlmond"
	//	| "Blue" | "BlueViolet" | "Brown" | "BurlyWood" | "CadetBlue" | "Chartreuse" | "Chocolate" | "Coral" |
	//	"CornflowerBlue" | "Cornsilk" | "Crimson" | "Cyan" | "DarkBlue" | "DarkCyan" | "DarkGoldenRod" | "DarkGray" |
	//	"DarkGreen" | "DarkGrey" | "DarkKhaki" | "DarkMagenta" | "DarkOliveGreen" | "DarkOrchid" | "DarkRed" | "DarkSalmo" |
	//	"DarkSeaGreen" | "DarkSlateBlue" | "DarkSlateGray" | "DarkSlateGrey" | "DarkTurquoise" | "DarkViolet" | "Darkorange"
	//	| "DeepPink" | "DeepSkyBlue" | "DimGray" | "DimGrey" | "DodgerBlue" | "FireBrick" | "FloralWhite" | "ForestGreen" |
	//	"Fuchsia" | "Gainsboro" | "GhostWhite" | "Gold" | "GoldenRod" | "Gray" | "Green" | "GreenYellow" | "Grey" |
	//	"HoneyDew" | "HotPink" | "IndianRed" | "Indigo" | "Ivory" | "Khaki" | "Lavender" | "LavenderBlush" | "LawnGreen" |
	//	"LemonChiffon" | "LightBlue" | "LightCoral" | "LightCyan" | "LightGoldenRodYellow" | "LightGray" | "LightGreen" |
	//	"LightGrey" | "LightPink" | "LightSalmon" | "LightSeaGreen" | "LightSkyBlue" | "LightSlateGray" | "LightSlateGrey" |
	//	"LightSteelBlue" | "LightYellow" | "Lime" | "LimeGreen" | "Linen" | "Magenta" | "Maroon" | "MediumAquaMarine" |
	//	"MediumBlue" | "MediumOrchid" | "MediumPurple" | "MediumSeaGreen" | "MediumSlateBlue" | "MediumSpringGreen" |
	//	"MediumTurquoise" | "MediumVioletRed" | "MidnightBlue" | "MintCream" | "MistyRose" | "Moccasin" | "NavajoWhite" |
	//	"Navy" | "OldLace" | "Olive" | "OliveDrab" | "OrangeRed" | "Orchid" | "PaleGoldenRod" | "PaleGreen" | "PaleTurquoise"
	//	| "PaleVioletRed" | "PapayaWhip" | "PeachPuff" | "Peru" | "Pink" | "Plum" | "PowderBlue" | "Purple" | "Red" |
	//	"RosyBrown" | "RoyalBlue" | "SaddleBrown" | "Salmon" | "SandyBrown" | "SeaGreen" | "Sienna" | "Silver" | "SkyBlue" |
	//	"SlateBlue" | "SlateGray" | "SlateGrey" | "Snow" | "SpringGreen" | "SteelBlue" | "Tan" | "Teal" | "Thistle" |
	//	"Tomato" | "Turquoise" | "Violet" | "Wheat" | "White" | "WhiteSmoke" | "Yellow" | "YellowGreen");
	public TerminalRule getCOLORRule() {
		return tCOLOR;
	} 

	//terminal HEXCODE:
	//	"#" ("A".."F" | "0".."9") ("A".."F" | "0".."9") ("A".."F" | "0".."9") ("A".."F" | "0".."9") ("A".."F" | "0".."9")
	//	("A".."F" | "0".."9");
	public TerminalRule getHEXCODERule() {
		return tHEXCODE;
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
