/*
 * generated by Xtext
 */
grammar InternalPlantuml;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.PlantumlGrammarAccess;

}

@parser::members {

 	private PlantumlGrammarAccess grammarAccess;
 	
    public InternalPlantumlParser(TokenStream input, PlantumlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PlantumlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDiagramsDiagramParserRuleCall_0()); 
	    }
		lv_diagrams_0_0=ruleDiagram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"diagrams",
        		lv_diagrams_0_0, 
        		"Diagram");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDiagram
entryRuleDiagram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDiagramRule()); }
	 iv_ruleDiagram=ruleDiagram 
	 { $current=$iv_ruleDiagram.current; } 
	 EOF 
;

// Rule Diagram
ruleDiagram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@startuml' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDiagramAccess().getStartumlKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDiagramAccess().getInstructionsInstructionParserRuleCall_1_0()); 
	    }
		lv_instructions_1_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDiagramRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_1_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='@enduml' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDiagramAccess().getEndumlKeyword_2());
    }
)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getInstructionAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstructionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getSequenceParserRuleCall_0_1()); 
    }
ruleSequence
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getInstructionAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstructionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInstructionAccess().getColonKeyword_0_3_0());
    }
this_STRING_4=RULE_STRING
    { 
    newLeafNode(this_STRING_4, grammarAccess.getInstructionAccess().getSTRINGTerminalRuleCall_0_3_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getCommentParserRuleCall_0_4()); 
    }
    this_Comment_5=ruleComment
    { 
        $current = $this_Comment_5.current; 
        afterParserOrEnumRuleCall();
    }
)?)
    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getCommentParserRuleCall_1()); 
    }
    this_Comment_6=ruleComment
    { 
        $current = $this_Comment_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDefinitionParserRuleCall_2()); 
    }
    this_Definition_7=ruleDefinition
    { 
        $current = $this_Definition_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSequence
entryRuleSequence returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); } 
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current.getText(); }  
	 EOF 
;

// Rule Sequence
ruleSequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_0_0()); 
    }
)*
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusGreaterThanSignKeyword_0_1()); 
    }
)
    |(
	kw='<-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getLessThanSignHyphenMinusKeyword_1_0()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_1_1()); 
    }
)*)
    |
	kw='->x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getXKeyword_2()); 
    }

    |
	kw='x<-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getXKeyword_3()); 
    }

    |((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_4_0()); 
    }
)*
	kw='->>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusGreaterThanSignGreaterThanSignKeyword_4_1()); 
    }
)
    |(
	kw='<<-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getLessThanSignLessThanSignHyphenMinusKeyword_5_0()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_5_1()); 
    }
)*)
    |((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_6_0()); 
    }
)*
	kw='-\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusReverseSolidusKeyword_6_1()); 
    }
)
    |(
	kw='/-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getSolidusHyphenMinusKeyword_7_0()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_7_1()); 
    }
)*)
    |((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_8_0()); 
    }
)*
	kw='-\\\\' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusReverseSolidusReverseSolidusKeyword_8_1()); 
    }
)
    |(
	kw='//-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getSolidusSolidusHyphenMinusKeyword_9_0()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_9_1()); 
    }
)*)
    |((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_10_0()); 
    }
)*
	kw='->o' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getOKeyword_10_1()); 
    }
)
    |(
	kw='o<-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getOKeyword_11_0()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_11_1()); 
    }
)*)
    |((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_12_0()); 
    }
)*
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusHyphenMinusKeyword_12_1()); 
    }

	kw='//o' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getOKeyword_12_2()); 
    }
)
    |(
	kw='o\\\\--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getOKeyword_13_0()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusKeyword_13_1()); 
    }
)*)
    |
	kw='<->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_14()); 
    }

    |
	kw='<->o' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getOKeyword_15()); 
    }

    |
	kw='o<->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getOKeyword_16()); 
    }

    |
	kw='<|--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getLessThanSignVerticalLineHyphenMinusHyphenMinusKeyword_17()); 
    }

    |
	kw='--|>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getHyphenMinusHyphenMinusVerticalLineGreaterThanSignKeyword_18()); 
    }

    |
	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getFullStopFullStopKeyword_19()); 
    }

    |
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSequenceAccess().getFullStopKeyword_20()); 
    }
)
    ;





// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	 iv_ruleComment=ruleComment 
	 { $current=$iv_ruleComment.current; } 
	 EOF 
;

// Rule Comment
ruleComment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='\'' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCommentAccess().getApostropheKeyword_0_0());
    }
this_STRING_1=RULE_STRING
    { 
    newLeafNode(this_STRING_1, grammarAccess.getCommentAccess().getSTRINGTerminalRuleCall_0_1()); 
    }
	otherlv_2='\'' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCommentAccess().getApostropheKeyword_0_2());
    }
)
    |(	otherlv_3='/\'' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCommentAccess().getSolidusApostropheKeyword_1_0());
    }
this_STRING_4=RULE_STRING
    { 
    newLeafNode(this_STRING_4, grammarAccess.getCommentAccess().getSTRINGTerminalRuleCall_1_1()); 
    }
(this_WS_5=RULE_WS
    { 
    newLeafNode(this_WS_5, grammarAccess.getCommentAccess().getWSTerminalRuleCall_1_2_0()); 
    }
(
(
		lv_strings_6_0=RULE_STRING
		{
			newLeafNode(lv_strings_6_0, grammarAccess.getCommentAccess().getStringsSTRINGTerminalRuleCall_1_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"strings",
        		lv_strings_6_0, 
        		"STRING");
	    }

)
))*(this_WS_7=RULE_WS
    { 
    newLeafNode(this_WS_7, grammarAccess.getCommentAccess().getWSTerminalRuleCall_1_3()); 
    }
)*	otherlv_8='\'/' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCommentAccess().getApostropheSolidusKeyword_1_4());
    }
))
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='actor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getActorKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
    |(	otherlv_2='boundary' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefinitionAccess().getBoundaryKeyword_1_0());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))
    |(	otherlv_4='control' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getControlKeyword_2_0());
    }
(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
))
    |(	otherlv_6='entity' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionAccess().getEntityKeyword_3_0());
    }
(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
))
    |(	otherlv_8='database' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDefinitionAccess().getDatabaseKeyword_4_0());
    }
(
(
		lv_name_9_0=RULE_ID
		{
			newLeafNode(lv_name_9_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_9_0, 
        		"ID");
	    }

)
)))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


