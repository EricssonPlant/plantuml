// Class for generating the grammar for the PlantUML language.
grammar org.xtext.Plantuml 
	//with org.eclipse.xtext.common.Terminals
	hidden (WS, SL_COMMENT, ML_COMMENT)
generate plantuml "http://www.xtext.org/Plantuml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


// Model is a number of @startuml's and @enduml's
Plantuml:
	NEWLINE* (diagrams+=Diagram)*;
	
// A diagram starts with @Startuml and ends with @enduml, with some number of instructions in between
Diagram:
	START NEWLINE (instructions+=Instruction)+ END NEWLINE*
;

// An instruction can be any of the rules for single- and multiline commands.
Instruction: 
	{Instruction}(instr=Sequence
	|instr=Definition
	|instr=AutoNumber
	|instr=Title
	|instr=Legend
	|instr=Newpage
	|instr=GroupingMessages
	|instr= Note
	|instr= Divider
	|instr= Reference 
	|instr= Delay
	|instr= Space
	|Hidefootbox
	|instr=Activate
	|instr=Deactivate
	|instr= ParticipantCreation
	|instr=Box
	|instr=IncOut
	|instr= Skinparam
	|Uc_direction)? NEWLINE // |instr= UC_direction
;

// 2.11 direction usecase diagram is painted in (vertical or horizontal)
Uc_direction:
	(('top' 'to' 'bottom' 'direction')
	|('left' 'to' 'right' 'direction'))	
;


// Rules for declarations of actors
// ------------------------------------------------------------------
// ------------------------------------------------------------------
Declaration: (Definition|Sequence);

// Rule for creating sequences between actors (Not necessarily previously defined)
Sequence:
	arrowIDs+=ArrowID arrow=Arrow arrowIDs+=ArrowID ('!')? (':' STRING)?
;

ArrowID:
	name=ID | "(" name = ID ")" | ":" name = ID ":"
;


Arrow:
	{Arrow} left=(LEFTARROWHEAD | LEFTARROWHEADEXTENSION)? ('[' '#' Color = Color ']')? 
	leftmid+=ARROWBODY+ ('[' '#'  Color = Color ']' rightmid+=ARROWBODY+)?
	 ('[' '#' Color = Color ']')? right=(RIGHTARROWHEAD | RIGHTARROWHEADEXTENSION)?
;

// Rule for defining objects in PlantUML, such as
// actors, boundaries, controls, entities and databases
Definition:
	((type=('actor' 
	| 'boundary'
	| 'control'
	| 'entity'
	| 'database'
	| 'participant'
	| 'usecase')) name=ID 
	| "(" name=ID ")"
	| ":" name=ID ":") (Stereotype = Stereotype)? ('#' Color = Color)?
;


// 1.24 Stereotype, used in Participant_Declaration
Stereotype:
	{Stereotype}'<<' ('(' CHAR ',' '#' Color = Color ')')? STRING? '>>'
;

// ------------------------------------------------------------------
// ------------------------------------------------------------------



// Rule for the autonumbering function. Can be followed by one or two numbers, separated by spaces
AutoNumber:
	{AutoNumber}'autonumber' (numbers+=INT (numbers+=INT)?)? STRING?
;

// Rule for the title of the diagram
Title:
	'title' title=STRING
;

// Rule for legends.
Legend:
	{Legend} 'legend' (pos=('right' | 'left' | 'center'))? 
	(NEWLINE STRING)* NEWLINE ('endlegend'|'end legend')
;

// Rule for newpages
Newpage:
	'newpage' text=STRING?
;

Else:
	{Else}'else' STRING NEWLINE (instructions+=Instruction)*
;

// Rule for "grouping-messages"
GroupingMessages:
	 {GroupingMessages} (op=('opt'|'loop'|'par'|'break'|'critical'|'group'|'alt')) STRING NEWLINE 
	(instructions+=Instruction)* (elses+=Else)* 'end'
;

// Rule for notes
Note:
	{Note}'note' ((dir='right' ('of' ids+=[Declaration|ID] (',' ids+=[Declaration|ID])*)?)
		   		 |(dir='left' ('of' ids+=[Declaration|ID] (',' ids+=[Declaration|ID])*)?)
		  		 |(dir='over' isd+=[Declaration|ID](',' ids+=[Declaration|ID])*))
		 		  ('#' Color = Color)? ((':' STRING)| (NEWLINE STRING? NEWLINE ('end note'|'endnote')))
;

// Rule for Dividers.
Divider:
	'==' text=STRING '=='
;

// Rule for References
Reference:
	'ref over' (id=[Declaration|ID]) (',' ids+=[Declaration|ID])* 
	(( ':' STRING)|((NEWLINE STRING)* NEWLINE ('endref'|('end ref'))))
;

// Rule for delays
// TODO: Read full strings even when containing dots (....).
Delay:
	{Delay}'...' (text=STRING '...')?
;

// Rule for Spaces
Space:
	{Space}('|||'|('||' number=INT '||'))
;

// Rule for hiding the footbox
Hidefootbox:
	'hide footbox'|'hide''footbox'|'hidefootbox'
;

// Rules for activation, deactivation and destruction of lifelines
Activate:
	'activate' name=ID  ('#'(Color = Color))?
;

Deactivate:
	('deactivate'|'destroy') id=[Activate|ID]
;

// Rule for Participant Creation
ParticipantCreation:
	'create' (name=ID|Definition)
;

// Rule for box/end box
Box:
	{Box}'box' STRING ('#' Color = Color)? NEWLINE
	(boxinstructions+=Instruction)+
	'end box'
;

IncArrow:
	('[' ARROWBODY+ RIGHTARROWHEAD)|('[' LEFTARROWHEAD ARROWBODY+)
;
OutArrow:
	(LEFTARROWHEAD ARROWBODY+ ']')|(ARROWBODY+ RIGHTARROWHEAD ']')
;

// Rule for incoming and outgoing messages
IncOut:
	((IncArrow name = ID)|(name = ID OutArrow)) (':' STRING)?
;

Skinparam:
	{Skinparam}'skinparam' cmd+=SkinparamCommand
	| {Skinparam}'skinparam' id=ID '{' NEWLINE (cmd+=SkinparamCommand? NEWLINE)* '}'
;
SkinparamCommand:
	{SkinparamCommand} key=ID '#'? (val=INT|ID)
;





// ValueConverter checks if the Color is a proper color or a hexcode
Color: ID|INT;

// Terminals
// ------------------------------------------------------------------
// ------------------------------------------------------------------

terminal NEWLINE 	: ('\r'? '\n');

terminal START		: '\u0040' 'startuml';

terminal END		: '\u0040' 'enduml';

// Multiline comment begins with /', and ends with '/
terminal ML_COMMENT : '/\'' -> '\'/'; 

// Singleline comment begins with ', and continues until end of line.
terminal SL_COMMENT : '\'' !('\n'|'\r')*;

terminal ARROWBODY:
	'.' | '=' | '-'
;

terminal RIGHTARROWHEAD:
	'>'
;

terminal LEFTARROWHEAD:
	'<'
;

terminal RIGHTARROWHEADEXTENSION:
	'x' | '>o' | '>x'
;

terminal LEFTARROWHEADEXTENSION:
	'x' | 'o<' | 'x<'
;

// INT is a sequence of numbers 0-9.
terminal INT returns ecore::EInt: ('0'..'9')+;

terminal CHAR: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö');

terminal ID: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö')*;

terminal STRING: '"' -> '"';

terminal WS: (' '|'\t')+;


terminal ANY_OTHER: .;


