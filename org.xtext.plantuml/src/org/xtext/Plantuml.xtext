// Class for generating the grammar for the PlantUML language.
grammar org.xtext.Plantuml 
	//with org.eclipse.xtext.common.Terminals
	hidden (WS, SL_COMMENT, ML_COMMENT)
generate plantuml "http://www.xtext.org/Plantuml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


// Model is a number of @startuml's and @enduml's
Plantuml:
	(diagrams+=Diagram)*;
	
// A diagram starts with @Startuml and ends with @enduml, with some number of instructions in between
Diagram:
	START NEWLINE (instructions+=Instruction)* END NEWLINE*
;

// An instruction can be any of the rules for single- and multiline commands.
Instruction: 
	(Arrow
	|Definition
	| AutoNumber
	| Title
	| Legend
	| Newpage
	| GroupingMessages
	| Note
	| Divider
	| Reference 
	| Delay
	| Space
	| Hidefootbox
	| Activate
	| Deactivate
	| ParticipantCreation
	| Box
	| IncOut
	| Skinparam)? NEWLINE
;

// Rule for creating sequences between actors (Not necessarily previously defined)
Arrow:
	names+=ID SEQUENCE names+=ID ('!')? (':' Full_String)?
;

// Rule for defining objects in PlantUML, such as
// actors, boundaries, controls, entities and databases
Definition:
	Definition_Type name=ID (Stereotype)? (Color)?
;

Definition_Type:
	('actor' 
	| 'boundary'
	| 'control'
	| 'entity'
	| 'database'
	| 'participant')
;

// 1.24 Stereotype, used in Participant_Declaration
Stereotype:
	'<<' ('(' CHAR ',' Color ')')? Full_String '>>'
;
Declaration: Definition|Arrow;

Full_String:
	Basic_String|'end'|'endlegend'
;

Woend_String:
	Basic_String|'endlegend'
;
Woendlegend_String:
	Basic_String|'end'
;

// |'endlegend'   
Keywords:
	'create'|'autonumber'|'title'|'legend'|'right'|'left'|'center'
	   |'alt'|'else'|'newpage'|'opt'|'loop'|'par'|'break'|'as'
	   |'critical'|'group'|'note'|'over'|'of'|'ref'|'hide'|'footbox'|'activate'
	   |'actor'|'boundary'|'control'|'entity'|'database'|'participant'
	   |'deactivate'|'destroy'|'box'|'skinparam'|'sequence'
	   |'#'|'='|'-'|'.'|':'|'>'|'<'|'!'|'in'|'|'|'('|')' // |'"'
;

ID: BASIC_ID|Keywords|'end'|'endlegend';

Basic_String:
	(BASIC_ID|Keywords|ANY_OTHER)*
;


// Rule for the autonumbering function. Can be followed by one or two numbers, separated by spaces
AutoNumber:
	'autonumber' (INT (INT)?)? ('"' Full_String '"')?
;

// Rule for the title of the diagram
Title:
	'title' Full_String
;

// Rule for legends.
Legend:
	'legend' ('right' | 'left' | 'center')? (NEWLINE Woendlegend_String)* 'endlegend'
;

// Rule for newpages
Newpage:
	'newpage' Full_String
;

Else:
	'else' Full_String NEWLINE (instructions+=Instruction)*
;

// Rule for "grouping-messages"
GroupingMessages:
	('opt'|'loop'|'par'|'break'|'critical'|'group'|'alt') Full_String NEWLINE (instructions+=Instruction)* (elses+=Else)* 'end'
;

// Rule for notes
Note:
	'note' (('right' ('of' rid=[Declaration|ID] (',' rids+=[Declaration|ID])*)?)
		   		 |('left' ('of' lid=[Declaration|ID] (',' lids+=[Declaration|ID])*)?)
		  		 |('over' oid=[Declaration|ID](',' oids+=[Declaration|ID])*)) 
		 		  (Colors)? ((':' Full_String)| ((NEWLINE Woend_String)* 'end note'))
;

// Rule for Dividers.
Divider:
	'==' Full_String '=='
;

// Rule for References
Reference:
	'ref over' (id=[Declaration|ID]) (',' ids+=[Declaration|ID])* (( ':' Full_String)|(Woend_String 'end ref'))
;

// Rule for delays
// TODO: Read full strings even when containing dots (....).
Delay:
	'...' (Full_String '...')?
;

// Rule for Spaces
Space:
	('|||'|('||' INT '||'))
;

// Rule for hiding the footbox
Hidefootbox:
	'hide footbox'
;

// Rules for activation, deactivation and destruction of lifelines
Activate:
	'activate' (Colors)? name=ID
;

Deactivate:
	('deactivate'|'destroy') id=[Activate|ID]
;

// Rule for Participant Creation
// TODO: Make sure the ID hasn't been created in beforehand.
ParticipantCreation:
	'create' name=ID
;

// Rule for box/end box
Box:
	'box' '"' Full_String '"' (Colors)? NEWLINE
	(definitions+=Definition? NEWLINE)* 
	'end box'
;

// Rule for incoming and outgoing messages
IncOut:
	((INCARROW name = ID)|(name = ID OUTARROW)) (':' Full_String)?
;

Skinparam:
	'skinparam' 'sequence' '{' NEWLINE (SkinparamCommand? NEWLINE)* '}'
;

SkinparamCommand:
	'ArrowColor' Colors
	|'ActorBorderColor' Colors
	|'LifeLineBorderColor' Colors
	|'LifeLineBackgroundColor' Colors
	|'ParticipantBorderColor' Colors
	|'ParticipantBackgroundColor' Colors
	|'ParticipantFontName' ID
	|'ActorBackgroundColor' Colors
	|'ActorFontColor' Colors
	|'Actorfontsize' INT
	|'ActorFontName' ID
;
Colors: '#' (Color|HEXCODE);

Color:
	('AliceBlue'|'AntiqueWhite'|'Aqua'|'Aquamarine'|'Azure'|'Beige'|'Bisque'|'Black'|'BlanchedAlmond'
	|'Blue'|'BlueViolet'|'Brown'|'BurlyWood'|'CadetBlue'|'Chartreuse'|'Chocolate'|'Coral'
	|'CornflowerBlue'|'Cornsilk'|'Crimson'|'Cyan'|'DarkBlue'|'DarkCyan'|'DarkGoldenRod'|'DarkGray'
	|'DarkGreen'|'DarkGrey'|'DarkKhaki'|'DarkMagenta'|'DarkOliveGreen'|'DarkOrchid'|'DarkRed'
	|'DarkSalmo'|'DarkSeaGreen'|'DarkSlateBlue'|'DarkSlateGray'|'DarkSlateGrey'|'DarkTurquoise'
	|'DarkViolet'|'Darkorange'|'DeepPink'|'DeepSkyBlue'|'DimGray'|'DimGrey'|'DodgerBlue'
	|'FireBrick'|'FloralWhite'|'ForestGreen'|'Fuchsia'|'Gainsboro'|'GhostWhite'|'Gold'
	|'GoldenRod'|'Gray'|'Green'|'GreenYellow'|'Grey'|'HoneyDew'|'HotPink'|'IndianRed'
	|'Indigo'|'Ivory'|'Khaki'|'Lavender'|'LavenderBlush'|'LawnGreen'|'LemonChiffon'
	|'LightBlue'|'LightCoral'|'LightCyan'|'LightGoldenRodYellow'|'LightGray'|'LightGreen'
	|'LightGrey'|'LightPink'|'LightSalmon'|'LightSeaGreen'|'LightSkyBlue'|'LightSlateGray'
	|'LightSlateGrey'|'LightSteelBlue'|'LightYellow'|'Lime'|'LimeGreen'|'Linen'|'Magenta'
	|'Maroon'|'MediumAquaMarine'|'MediumBlue'|'MediumOrchid'|'MediumPurple'|'MediumSeaGreen'
	|'MediumSlateBlue'|'MediumSpringGreen'|'MediumTurquoise'|'MediumVioletRed'
	|'MidnightBlue'|'MintCream'|'MistyRose'|'Moccasin'|'NavajoWhite'|'Navy'|'OldLace'
	|'Olive'|'OliveDrab'|'OrangeRed'|'Orchid'|'PaleGoldenRod'|'PaleGreen'
	|'PaleTurquoise'|'PaleVioletRed'|'PapayaWhip'|'PeachPuff'|'Peru'|'Pink'|'Plum'
	|'PowderBlue'|'Purple'|'Red'|'RosyBrown'|'RoyalBlue'|'SaddleBrown'
	|'Salmon'|'SandyBrown'|'SeaGreen'|'Sienna'|'Silver'|'SkyBlue'|'SlateBlue'
	|'SlateGray'|'SlateGrey'|'Snow'|'SpringGreen'|'SteelBlue'|'Tan'|'Teal'|'Thistle'
	|'Tomato'|'Turquoise'|'Violet'|'Wheat'|'White'|'WhiteSmoke'|'Yellow'|'YellowGreen')
;


// Terminals
//--------------------------------------------------

terminal NEWLINE 	: ('\r'? '\n');

terminal START		: '\u0040' 'startuml';

terminal END		: '\u0040' 'enduml';

// Multiline comment begins with /', and ends with '/
terminal ML_COMMENT : '/\'' -> '\'/'; 

// Singleline comment begins with ', and continues until end of line.
terminal SL_COMMENT : '\'' !('\n'|'\r')*;

terminal INCARROW: ('[' '-'+ '>')|('[' '<' '-'+);
terminal OUTARROW: ('<' '-'+ ']')|('-'+ '>' ']');

// Sequences are arrows connecting two actors. Has to be defined in unicode.
terminal SEQUENCE:
	('\u002D')* '\u002D' '\u003E'							// - = u002D  | > = u003E
	| '\u003C' '\u002D' ('\u002D')* 						// < = u003C  | - = u002D
	| '\u002D' '\u003E' 'x'									// - = u002D  | > = u003E
	| 'x' '\u003C' '\u002D' 								// < = u003C | - = u002D
	| ('\u002D')* '\u002D' '\u003E' '\u003E'				// - = u002D | > = u003E
	| '\u003C' '\u003C' '\u002D' ('\u002D')*				// < = u003C | - = u002D
	| ('\u002D')* '\u002D' '\u005C' '\u005C'				// - = u002D
	| '\u002F' '\u002D' ('\u002D')*							// / = u002F | - = u002D
	| '\u002F' '\u002F' '\u002D' ('\u002D')*				// / = u002F | - = u002D
	| ('\u002D')* '\u002D' '\u003E' 'o'						// - = u002D | > = u003E
	| 'o' '\u003C' '\u002D' ('\u002D')*						// < = u003C | - = u002D
	| ('\u002D')* '\u002D' '\u002D' '\u002F' '\u002F' 'o'	// - = u002D | / = u002F
	| 'o' '\\\\' '\u002D' '\u002D' ('\u002D')* 				// - = u002D
	| '\u003C' '\u002D' '\u003E' 							// < = u003C | - = u002D | > = u003E
	| '\u003C' '\u002D' '\u003E' 'o' 						// < = u003C | - = u002D | > = u003E
	| 'o' '\u003C' '\u002D' '\u003E' 						// < = u003C | - = u002D | > = u003E
	| '\u003C' '\u007C' '\u002D' '\u002D' 					// < = u003C | | = u007C | - = u002D
	| '\u002D' '\u002D' '\u007C' '\u003E' 					// - = u002D | | = u007C | > = u003E
	| '\u002E' '\u002E' 									// . = u002E
	| '\u002E'												// . = u002E	
;

// INT is a sequence of numbers 0-9.
terminal INT returns ecore::EInt: ('0'..'9')+;

terminal HEXCODE: ('A' .. 'F'|'0' .. '9'|'a' .. 'f')('A' .. 'F'|'0' .. '9'|'a' .. 'f')+;

terminal CHAR: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö');

// ID can be any following sequence of letters and numbers, without spaces between them.
terminal BASIC_ID  		: ('a'..'z'|'A'..'Z'|'0'..'9' | 'å' | 'ä' | 'ö')*;

terminal WS			: (' '|'\t')+;

terminal ANY_OTHER: .;


