/*
 * generated by Xtext
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.plantuml.Activate;
import org.xtext.plantuml.AltElse;
import org.xtext.plantuml.Arrow;
import org.xtext.plantuml.Box;
import org.xtext.plantuml.Deactivate;
import org.xtext.plantuml.Definition;
import org.xtext.plantuml.Diagram;
import org.xtext.plantuml.Else;
import org.xtext.plantuml.GroupingMessages;
import org.xtext.plantuml.Note;
import org.xtext.plantuml.Plantuml;
import org.xtext.plantuml.PlantumlPackage;
import org.xtext.plantuml.Reference;
import org.xtext.services.PlantumlGrammarAccess;

@SuppressWarnings("all")
public class PlantumlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PlantumlGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == PlantumlPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case PlantumlPackage.ACTIVATE:
				sequence_Activate(context, (Activate) semanticObject); 
				return; 
			case PlantumlPackage.ALT_ELSE:
				sequence_AltElse(context, (AltElse) semanticObject); 
				return; 
			case PlantumlPackage.ARROW:
				sequence_Arrow(context, (Arrow) semanticObject); 
				return; 
			case PlantumlPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case PlantumlPackage.DEACTIVATE:
				sequence_Deactivate(context, (Deactivate) semanticObject); 
				return; 
			case PlantumlPackage.DEFINITION:
				sequence_Definition(context, (Definition) semanticObject); 
				return; 
			case PlantumlPackage.DIAGRAM:
				sequence_Diagram(context, (Diagram) semanticObject); 
				return; 
			case PlantumlPackage.ELSE:
				sequence_Else(context, (Else) semanticObject); 
				return; 
			case PlantumlPackage.GROUPING_MESSAGES:
				sequence_GroupingMessages(context, (GroupingMessages) semanticObject); 
				return; 
			case PlantumlPackage.NOTE:
				sequence_Note(context, (Note) semanticObject); 
				return; 
			case PlantumlPackage.PLANTUML:
				sequence_Plantuml(context, (Plantuml) semanticObject); 
				return; 
			case PlantumlPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Activate(EObject context, Activate semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PlantumlPackage.Literals.ACTIVATE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlantumlPackage.Literals.ACTIVATE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getActivateAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (instructions+=Instruction* elses+=Else*)
	 */
	protected void sequence_AltElse(EObject context, AltElse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=MyID names+=MyID)
	 */
	protected void sequence_Arrow(EObject context, Arrow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     definitions+=Definition+
	 */
	protected void sequence_Box(EObject context, Box semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     id=[Activate|ID]
	 */
	protected void sequence_Deactivate(EObject context, Deactivate semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, PlantumlPackage.Literals.DEACTIVATE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlantumlPackage.Literals.DEACTIVATE__ID));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDeactivateAccess().getIdActivateIDTerminalRuleCall_1_0_1(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=MyID | 
	 *         name=MyID | 
	 *         name=MyID | 
	 *         name=MyID | 
	 *         name=MyID | 
	 *         name=MyID?
	 *     )
	 */
	protected void sequence_Definition(EObject context, Definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     instructions+=Instruction*
	 */
	protected void sequence_Diagram(EObject context, Diagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     instructions+=Instruction*
	 */
	protected void sequence_Else(EObject context, Else semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     instructions+=Instruction+
	 */
	protected void sequence_GroupingMessages(EObject context, GroupingMessages semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((rid=[Definition|ID] rids+=[Definition|ID]*)? | (lid=[Definition|ID] lids+=[Definition|ID]*)? | (oid=[Definition|ID] oids+=[Definition|ID]*))
	 */
	protected void sequence_Note(EObject context, Note semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     diagrams+=Diagram*
	 */
	protected void sequence_Plantuml(EObject context, Plantuml semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (id=[Definition|ID] ids+=[Definition|ID]*)
	 */
	protected void sequence_Reference(EObject context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
